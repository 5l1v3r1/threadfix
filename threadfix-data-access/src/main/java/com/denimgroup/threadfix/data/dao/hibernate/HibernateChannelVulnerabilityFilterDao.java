////////////////////////////////////////////////////////////////////////
//
//     Copyright (c) 2009-2015 Denim Group, Ltd.
//
//     The contents of this file are subject to the Mozilla Public License
//     Version 2.0 (the "License"); you may not use this file except in
//     compliance with the License. You may obtain a copy of the License at
//     http://www.mozilla.org/MPL/
//
//     Software distributed under the License is distributed on an "AS IS"
//     basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//     License for the specific language governing rights and limitations
//     under the License.
//
//     The Original Code is ThreadFix.
//
//     The Initial Developer of the Original Code is Denim Group, Ltd.
//     Portions created by Denim Group, Ltd. are Copyright (C)
//     Denim Group, Ltd. All Rights Reserved.
//
//     Contributor(s): Denim Group, Ltd.
//
////////////////////////////////////////////////////////////////////////
package com.denimgroup.threadfix.data.dao.hibernate;

import com.denimgroup.threadfix.data.dao.AbstractObjectDao;
import com.denimgroup.threadfix.data.dao.ChannelVulnerabilityFilterDao;
import com.denimgroup.threadfix.data.entities.ChannelVulnerability;
import com.denimgroup.threadfix.data.entities.ChannelVulnerabilityFilter;
import org.hibernate.Criteria;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import java.util.List;

/**
 * Hibernate Channel Vulnerability Filter DAO implementation. Most basic methods are implemented in
 * the AbstractGenericDao
 * 
 * @author stran
 * @see com.denimgroup.threadfix.data.dao.AbstractObjectDao
 */
@Repository
public class HibernateChannelVulnerabilityFilterDao
        extends AbstractObjectDao<ChannelVulnerabilityFilter>
		implements ChannelVulnerabilityFilterDao {

	@Autowired
	public HibernateChannelVulnerabilityFilterDao(SessionFactory sessionFactory) {
		super(sessionFactory);
	}

	@Override
	protected Class<ChannelVulnerabilityFilter> getClassReference() {
		return ChannelVulnerabilityFilter.class;
	}


	private Criteria getChannelFilterCriteria() {
		return sessionFactory.getCurrentSession()
				.createCriteria(ChannelVulnerabilityFilter.class);
	}

	@Override
	public ChannelVulnerabilityFilter retrieveByChannelVulnerability(ChannelVulnerability sourceChannelVulnerability) {
		Criteria criteria = getChannelFilterCriteria()
				.createAlias("sourceChannelVulnerability", "channelVulnerability")
				.add(Restrictions.eq("channelVulnerability.id", sourceChannelVulnerability.getId()));
		return (ChannelVulnerabilityFilter) criteria.uniqueResult();
	}

	@Override
	public void applyChannelVulnFilterGlobal(ChannelVulnerabilityFilter channelVulnerabilityFilter) {

		List list = sessionFactory.getCurrentSession().createQuery(
				"select finding.vulnerability.id from Finding finding where finding.channelVulnerability.name = :vulnName and finding.firstFindingForVuln = true " +
						"and finding.scan.applicationChannel.channelType.id = :channelTypeId")
				.setParameter("channelTypeId", channelVulnerabilityFilter.getSourceChannelType().getId())
				.setParameter("vulnName", channelVulnerabilityFilter.getSourceChannelVulnerability().getName())
				.list();

		if (!list.isEmpty()) {
			if (channelVulnerabilityFilter.getTargetGenericSeverity() != null) {
				sessionFactory.getCurrentSession().createQuery(
						"update Vulnerability vulnerability set genericSeverity = :genericSeverity where id in (:vulnIds)")
						.setParameterList("vulnIds", list)
						.setParameter("genericSeverity", channelVulnerabilityFilter.getTargetGenericSeverity())
						.executeUpdate();

				sessionFactory.getCurrentSession().createQuery(
						"update StatisticsCounter counter set currentGenericSeverityId = :genericSeverityId where vulnerabilityId in (:vulnIds)")
						.setParameterList("vulnIds", list)
						.setParameter("genericSeverityId", channelVulnerabilityFilter.getTargetGenericSeverity().getId())
						.executeUpdate();

			} else {
				sessionFactory.getCurrentSession().createQuery(
						"update Vulnerability vulnerability set hidden = true where id in (:vulnIds)")
						.setParameterList("vulnIds", list)
						.executeUpdate();
			}
		}

	}

	@Override
	public void delete(int filterId) {
		ChannelVulnerabilityFilter filter = retrieveById(filterId);
		if (filter != null) {
			delete(filter);
		}
	}

	@Override
	public void delete(ChannelVulnerabilityFilter channelVulnerabilityFilter) {
		sessionFactory.getCurrentSession().delete(channelVulnerabilityFilter);
	}
}
