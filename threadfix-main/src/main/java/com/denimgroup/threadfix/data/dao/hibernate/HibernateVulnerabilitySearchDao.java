////////////////////////////////////////////////////////////////////////
//
//     Copyright (c) 2009-2014 Denim Group, Ltd.
//
//     The contents of this file are subject to the Mozilla Public License
//     Version 2.0 (the "License"); you may not use this file except in
//     compliance with the License. You may obtain a copy of the License at
//     http://www.mozilla.org/MPL/
//
//     Software distributed under the License is distributed on an "AS IS"
//     basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//     License for the specific language governing rights and limitations
//     under the License.
//
//     The Original Code is ThreadFix.
//
//     The Initial Developer of the Original Code is Denim Group, Ltd.
//     Portions created by Denim Group, Ltd. are Copyright (C)
//     Denim Group, Ltd. All Rights Reserved.
//
//     Contributor(s): Denim Group, Ltd.
//
////////////////////////////////////////////////////////////////////////
package com.denimgroup.threadfix.data.dao.hibernate;

import com.denimgroup.threadfix.data.dao.VulnerabilitySearchDao;
import com.denimgroup.threadfix.data.entities.*;
import org.hibernate.Criteria;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

/**
 * Created by mac on 5/7/14.
 */
@Repository
@SuppressWarnings("unchecked")
public class HibernateVulnerabilitySearchDao implements VulnerabilitySearchDao {

    @Autowired
    private SessionFactory sessionFactory;

    @Override
    public List<Vulnerability> performLookup(VulnerabilitySearchParameters parameters) {
        assert parameters != null;

        Criteria criteria = sessionFactory.getCurrentSession().createCriteria(Vulnerability.class);
        criteria.createAlias("genericSeverity", "severity");
        criteria.createAlias("genericVulnerability", "genericVulnAlias");
        criteria.createAlias("surfaceLocation", "surface");
        criteria.addOrder(Order.desc("severity.intValue"));
        criteria.setMaxResults(parameters.getNumberVulnerabilities());

        addTeams(criteria, parameters);
        addApplications(criteria, parameters);
        addSeverities(criteria, parameters);
        addChannelTypeRestrictions(criteria, parameters);
        addTypeRestrictions(criteria, parameters);
        addAgeRestrictions(criteria, parameters);
        addPathAndParameter(criteria, parameters);
        addMinimumMergedFindings(criteria, parameters);
        addStatusRestrictions(criteria, parameters);

        return (List<Vulnerability>) criteria.list();
    }

    private void addApplications(Criteria criteria, VulnerabilitySearchParameters parameters) {
        if (parameters.getApplications() != null && !parameters.getApplications().isEmpty()) {
            List<Integer> applicationIds = new ArrayList<>();
            for (Application application : parameters.getApplications()) {
                if (application.getId() != null) {
                    applicationIds.add(application.getId());
                }
            }

            if (!applicationIds.isEmpty()) {
                criteria.add(Restrictions.in("application.id", applicationIds));
            }
        }
    }

    private void addStatusRestrictions(Criteria criteria, VulnerabilitySearchParameters parameters) {
        boolean showOpen = parameters.getShowOpen() != null && parameters.getShowOpen();
        boolean showClosed = parameters.getShowClosed() != null && parameters.getShowClosed();
        if (showOpen != showClosed) {
            criteria.add(Restrictions.eq("active", showOpen));
        }

        criteria
            .add(Restrictions.eq("hidden", parameters.getShowHidden() != null && parameters.getShowHidden()))
            .add(Restrictions.eq("isFalsePositive", parameters.getShowFalsePositive() != null && parameters.getShowFalsePositive()));
    }

    private void addMinimumMergedFindings(Criteria criteria, VulnerabilitySearchParameters parameters) {
        if (parameters.getNumberMerged() != null && parameters.getNumberMerged() > 0) {
            criteria.add(Restrictions.sizeGe("findings", parameters.getNumberMerged()));
        }
    }

    private void addPathAndParameter(Criteria criteria, VulnerabilitySearchParameters parameters) {
        if (parameters.getPath() != null && !parameters.getPath().trim().equals("")) {
            criteria.add(Restrictions.like("surface.path", "%" + parameters.getPath() + "%")
                    .ignoreCase());
        }

        if (parameters.getParameter() != null && !parameters.getParameter().trim().equals("")) {
            criteria.add(Restrictions.like("surface.parameter", "%" + parameters.getParameter() + "%")
                    .ignoreCase());
        }
    }

    private void addAgeRestrictions(Criteria criteria, VulnerabilitySearchParameters parameters) {
        // Limit scanner if present
        if (parameters.getDaysOldModifier() != null && (parameters.getDaysOldModifier().equals("Less") ||
                parameters.getDaysOldModifier().equals("More"))
                && parameters.getDaysOld() != null && parameters.getDaysOld() > 0) {

            Criteria subCriteria = sessionFactory.getCurrentSession().createCriteria(Finding.class);

            Calendar targetDate = Calendar.getInstance();
            targetDate.add(Calendar.DAY_OF_YEAR, -parameters.getDaysOld());

            subCriteria.createAlias("scan", "scanAlias");
            if (parameters.getDaysOldModifier().equals("More")) {
                subCriteria.add(Restrictions.lt("scanAlias.importTime", targetDate));
            } else if (parameters.getDaysOldModifier().equals("Less")) {
                subCriteria.add(Restrictions.gt("scanAlias.importTime", targetDate));
            }

            subCriteria.add(Restrictions.eq("firstFindingForVuln", true));
            subCriteria.setProjection(Projections.property("vulnerability.id"));

            List<Integer> ids = (List<Integer>) subCriteria.list();

            if (ids.size() == 0) {
                ids.add(0);
            }

            criteria.add(Restrictions.in("id", ids));
        }
    }

    private void addTypeRestrictions(Criteria criteria, VulnerabilitySearchParameters parameters) {
        if (parameters.getGenericVulnerabilities() != null && !parameters.getGenericVulnerabilities().isEmpty()) {
            List<Integer> genericVulnerabilityIds = new ArrayList<>();
            for (GenericVulnerability genericVulnerability : parameters.getGenericVulnerabilities()) {
                if (genericVulnerability.getId() != null) {
                    genericVulnerabilityIds.add(genericVulnerability.getId());
                }
            }
            if (!genericVulnerabilityIds.isEmpty()) {
                criteria.add(Restrictions.in("genericVulnAlias.id", genericVulnerabilityIds));
            }
        }
    }

    // Limit Generic Severities if they were present
    private void addSeverities(Criteria criteria, VulnerabilitySearchParameters parameters) {
        if (parameters.getGenericSeverities() != null && !parameters.getGenericSeverities().isEmpty()) {
            List<Integer> severityIntValues = new ArrayList<>();
            for (GenericSeverity severity : parameters.getGenericSeverities()) {
                severityIntValues.add(severity.getIntValue());
            }
            if (!severityIntValues.isEmpty()) {
                criteria.add(Restrictions.in("severity.intValue", severityIntValues));
            }
        }
    }

    // Add team restrictions if teams were selected in the UI
    private void addTeams(Criteria criteria, VulnerabilitySearchParameters parameters) {
        if (parameters.getTeams() != null && !parameters.getTeams().isEmpty()) {
            List<Integer> organizationIds = new ArrayList<>();
            for (Organization organization : parameters.getTeams()) {
                if (organization.getId() != null) {
                    organizationIds.add(organization.getId());
                }
            }

            if (!organizationIds.isEmpty()) {
                criteria.createAlias("application.organization", "team");
                criteria.add(Restrictions.in("team.id", organizationIds));
            }
        }
    }

    private void addChannelTypeRestrictions(Criteria criteria, VulnerabilitySearchParameters parameters) {

        // Limit scanner if present
        if (parameters.getChannelTypes() != null && !parameters.getChannelTypes().isEmpty()) {
            List<Integer> channelTypeIds = new ArrayList<>();
            for (ChannelType channelType : parameters.getChannelTypes()) {
                if (channelType.getId() != null) {
                    channelTypeIds.add(channelType.getId());
                }
            }

            if (!channelTypeIds.isEmpty()) {
                Criteria subCriteria = sessionFactory.getCurrentSession().createCriteria(Finding.class);

                subCriteria.createAlias("scan", "myScan");
                subCriteria.createAlias("myScan.applicationChannel", "myApplicationChannel");
                subCriteria.createAlias("myApplicationChannel.channelType", "myChannelType");

                subCriteria.add(Restrictions.in("myChannelType.id", channelTypeIds));

                subCriteria.setProjection(Projections.property("vulnerability.id"));

                List<Integer> ids = (List<Integer>) subCriteria.list();
                criteria.add(Restrictions.in("id", ids));
            }
        }
    }
}
