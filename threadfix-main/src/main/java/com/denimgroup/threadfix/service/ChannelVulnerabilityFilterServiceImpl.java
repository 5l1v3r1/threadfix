////////////////////////////////////////////////////////////////////////
//
//     Copyright (c) 2009-2015 Denim Group, Ltd.
//
//     The contents of this file are subject to the Mozilla Public License
//     Version 2.0 (the "License"); you may not use this file except in
//     compliance with the License. You may obtain a copy of the License at
//     http://www.mozilla.org/MPL/
//
//     Software distributed under the License is distributed on an "AS IS"
//     basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//     License for the specific language governing rights and limitations
//     under the License.
//
//     The Original Code is ThreadFix.
//
//     The Initial Developer of the Original Code is Denim Group, Ltd.
//     Portions created by Denim Group, Ltd. are Copyright (C)
//     Denim Group, Ltd. All Rights Reserved.
//
//     Contributor(s): Denim Group, Ltd.
//
////////////////////////////////////////////////////////////////////////

package com.denimgroup.threadfix.service;

import com.denimgroup.threadfix.data.dao.*;
import com.denimgroup.threadfix.data.entities.*;
import com.denimgroup.threadfix.logging.SanitizedLogger;
import com.denimgroup.threadfix.service.queue.QueueSender;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.BindingResult;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static com.denimgroup.threadfix.CollectionUtils.list;

@Service
public class ChannelVulnerabilityFilterServiceImpl implements ChannelVulnerabilityFilterService {

    private final SanitizedLogger log = new SanitizedLogger(ChannelVulnerabilityFilterServiceImpl.class);

	@Autowired
	private ChannelVulnerabilityFilterDao channelVulnerabilityFilterDao;
	@Autowired
	private ChannelVulnerabilityDao channelVulnerabilityDao;
	@Autowired
	private ChannelTypeDao channelTypeDao;
	@Autowired
	private GenericSeverityDao genericSeverityDao;
	@Autowired
	private QueueSender queueSender;
	@Autowired
	private VulnerabilityFilterService vulnerabilityFilterService;
	@Autowired
	private ScanDao scanDao;

	@Override
	public List<ChannelVulnerabilityFilter> retrieveAll() {
		return channelVulnerabilityFilterDao.retrieveAll();
	}

	@Override
	public ChannelVulnerabilityFilter validate(ChannelVulnerabilityFilter channelVulnerabilityFilter, BindingResult bindingResult, int filterId) {
		if (channelVulnerabilityFilter == null ||
				channelVulnerabilityFilter.getSourceChannelType() == null ||
				channelVulnerabilityFilter.getSourceChannelVulnerability() == null ||
				channelVulnerabilityFilter.getTargetGenericSeverity() == null) {
			bindingResult.rejectValue("sourceChannelVulnerability.name", null, "This channel vulnerability was not found.");
			return null;
		}

		ChannelVulnerability channelVulnerability = channelVulnerabilityDao.retrieveById(channelVulnerabilityFilter.getSourceChannelVulnerability().getId());
		if (channelVulnerability == null) {
			bindingResult.rejectValue("sourceChannelVulnerability.name", null, "This channel vulnerability was not found.");
			return null;
		}

		ChannelType channelType = channelTypeDao.retrieveById(channelVulnerabilityFilter.getSourceChannelType().getId());
		if (channelType == null) {
			bindingResult.rejectValue("sourceChannelType.name", null, "This channel type was not found.");
			return null;
		}

		if (channelVulnerabilityFilter.getTargetGenericSeverity().getId() == -1) {
			channelVulnerabilityFilter.setTargetGenericSeverity(null);
		} else {
			GenericSeverity severity = genericSeverityDao.retrieveById(
					channelVulnerabilityFilter.getTargetGenericSeverity().getId());
			boolean hasSeverity = severity != null;
			if (!hasSeverity) {
				bindingResult.rejectValue("targetGenericSeverity.id", null, "This severity was not found.");
				return null;
			}
		}

		ChannelVulnerabilityFilter databaseFilter = channelVulnerabilityFilterDao.retrieveByChannelVulnerability(channelVulnerabilityFilter.getSourceChannelVulnerability());

		if (databaseFilter != null && databaseFilter.getId() != null &&
				( filterId < 0 || (databaseFilter.getId() != filterId))) {
			bindingResult.rejectValue("sourceChannelVulnerability.name", null, "This filter already exists.");
			return null;
		}

		return channelVulnerabilityFilter;
	}

	@Override
	@Transactional(readOnly=false)
	public void save(ChannelVulnerabilityFilter channelVulnerabilityFilter) {
		if (channelVulnerabilityFilter != null) {
			channelVulnerabilityFilterDao.saveOrUpdate(channelVulnerabilityFilter);
			log.info("Saving Channel Vulnerability Filter with ID " + channelVulnerabilityFilter.getId() + ".");
		}
	}

	@Override
	@Transactional(readOnly = false)
	public void updateStatistics() {
			queueSender.updateVulnFilter();
	}

	@Override
	public void updateVulnerabilitiesByChannelFilter(Integer channelFilterId) {
		long start = System.currentTimeMillis();

		ChannelVulnerabilityFilter channelVulnerabilityFilter = channelVulnerabilityFilterDao.retrieveById(channelFilterId);
		assert channelVulnerabilityFilter != null;

		channelVulnerabilityFilterDao.applyChannelVulnFilterGlobal(channelVulnerabilityFilter);

		queueSender.updateVulnFilter();
		log.debug("Took " + (System.currentTimeMillis() - start) + " to update all vulnerability by Channel Vulnerabilities filter with ID " + channelFilterId);

	}

	@Override
	@Transactional
	public void delete(int filterId) {

		ChannelVulnerabilityFilter filter = channelVulnerabilityFilterDao.retrieveById(filterId);
		if (filter != null) {
			log.info("Deleting Channel Vulnerability Filter.");
			boolean updateVuln = filter.getTargetGenericSeverity() == null;
			channelVulnerabilityFilterDao.delete(filter);

			//Reset hidden vulns
			if (updateVuln) {
				queueSender.updateVulnFilter();
			}
		} else {
			log.warn("Filter is invalid.");
		}
	}

	@Override
	public void applyAllChannelVulnFilters() {
		List<ChannelVulnerabilityFilter> channelVulnerabilityFilters = channelVulnerabilityFilterDao.retrieveAll();
		for (ChannelVulnerabilityFilter filter: channelVulnerabilityFilters) {
			channelVulnerabilityFilterDao.applyChannelVulnFilterGlobal(filter);
		}
	}
}
