////////////////////////////////////////////////////////////////////////
//
//     Copyright (c) 2009-2013 Denim Group, Ltd.
//     Copyright (c) 2009-2013 Denim Group, Ltd.
//
//     The contents of this file are subject to the Mozilla Public License
//     Version 2.0 (the "License"); you may not use this file except in
//     compliance with the License. You may obtain a copy of the License at
//     http://www.mozilla.org/MPL/
//
//     Software distributed under the License is distributed on an "AS IS"
//     basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//     License for the specific language governing rights and limitations
//     under the License.
//
//     The Original Code is ThreadFix.
//
//     The Initial Developer of the Original Code is Denim Group, Ltd.
//     Portions created by Denim Group, Ltd. are Copyright (C)
//     Denim Group, Ltd. All Rights Reserved.
//
//     Contributor(s): Denim Group, Ltd.
//
////////////////////////////////////////////////////////////////////////
package com.denimgroup.threadfix.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.BindingResult;

import com.denimgroup.threadfix.data.dao.ApplicationDao;
import com.denimgroup.threadfix.data.dao.GenericSeverityDao;
import com.denimgroup.threadfix.data.dao.GenericVulnerabilityDao;
import com.denimgroup.threadfix.data.dao.OrganizationDao;
import com.denimgroup.threadfix.data.dao.VulnerabilityDao;
import com.denimgroup.threadfix.data.dao.VulnerabilityFilterDao;
import com.denimgroup.threadfix.data.entities.Application;
import com.denimgroup.threadfix.data.entities.Finding;
import com.denimgroup.threadfix.data.entities.GenericSeverity;
import com.denimgroup.threadfix.data.entities.GenericVulnerability;
import com.denimgroup.threadfix.data.entities.Organization;
import com.denimgroup.threadfix.data.entities.Scan;
import com.denimgroup.threadfix.data.entities.SeverityFilter;
import com.denimgroup.threadfix.data.entities.Vulnerability;
import com.denimgroup.threadfix.data.entities.VulnerabilityFilter;

@Service
public class VulnerabilityFilterServiceImpl implements VulnerabilityFilterService {
	
	private VulnerabilityFilterDao vulnerabilityFilterDao;
	private GenericVulnerabilityDao genericVulnerabilityDao;
	private GenericSeverityDao genericSeverityDao;
	private VulnerabilityDao vulnerabilityDao;
	private ApplicationDao applicationDao;
	private OrganizationDao organizationDao;
	private SeverityFilterService severityFilterService;
	
	@Autowired
	public VulnerabilityFilterServiceImpl(
			SeverityFilterService severityFilterService,
			OrganizationDao organizationDao,
			ApplicationDao applicationDao,
			VulnerabilityDao vulnerabilityDao,
			GenericSeverityDao genericSeverityDao,
			VulnerabilityFilterDao vulnerabilityFilterDao,
			GenericVulnerabilityDao genericVulnerabilityDao) {
		this.vulnerabilityDao = vulnerabilityDao;
		this.severityFilterService = severityFilterService;
		this.applicationDao = applicationDao;
		this.organizationDao = organizationDao;
		this.vulnerabilityFilterDao = vulnerabilityFilterDao;
		this.genericSeverityDao = genericSeverityDao;
		this.genericVulnerabilityDao = genericVulnerabilityDao;
	}

	@Override
	public VulnerabilityFilter load(int vulnFilterId) {
		return vulnerabilityFilterDao.retrieveById(vulnFilterId);
	}
	
	@Override
	public VulnerabilityFilter validate(VulnerabilityFilter vulnerabilityFilter,
			BindingResult bindingResult) {
		return validate(vulnerabilityFilter, bindingResult, -1);
	}

	@Override
	public VulnerabilityFilter validate(
			VulnerabilityFilter vulnerabilityFilter,
			BindingResult bindingResult,
			int id) {
		if (vulnerabilityFilter == null || vulnerabilityFilter == null ||
				vulnerabilityFilter.getSourceGenericVulnerability() == null ||
				vulnerabilityFilter.getTargetGenericSeverity() == null) {
			bindingResult.rejectValue("sourceGenericVulnerability.name", null, "This vulnerability was not found.");
			return null;
		}
		
		GenericVulnerability vuln = getGenericVulnerability(
				vulnerabilityFilter.getSourceGenericVulnerability().getName());
		
		int vulnId = -1;
		if (vuln != null) {
			vulnId = vuln.getId();
			vulnerabilityFilter.setSourceGenericVulnerability(vuln);
		}
		
		boolean hasSeverity = false;
		if (vulnerabilityFilter.getTargetGenericSeverity().getId() == -1) {
			hasSeverity = true;
			vulnerabilityFilter.setTargetGenericSeverity(null);
			vulnerabilityFilter.setHide(true);
		} else {
			GenericSeverity severity = genericSeverityDao.retrieveById(
					vulnerabilityFilter.getTargetGenericSeverity().getId());
			hasSeverity = severity != null;
			if (hasSeverity) {
				vulnerabilityFilter.setHide(false);
				vulnerabilityFilter.setTargetGenericSeverity(severity);
			}
		}
		
		VulnerabilityFilter databaseFilter = vulnerabilityFilterDao.retrieveByVulnerabilityAndType(
				vulnId, vulnerabilityFilter);
		
		if (databaseFilter != null && databaseFilter.getId() != null && databaseFilter.getId() != id) {
			bindingResult.rejectValue("sourceGenericVulnerability.name", null, "This filter already exists.");
		} else if (vuln == null) {
			bindingResult.rejectValue("sourceGenericVulnerability.name", null, "This vulnerability was not found.");
		} else if (!hasSeverity) {
			bindingResult.rejectValue("sourceGenericSeverity.id", null, "This severity was not found.");
		}
		
		return vulnerabilityFilter;
	}

	@Override
	@Transactional(readOnly=false)
	public void save(VulnerabilityFilter vulnerabilityFilter, int orgId, int appId) {
		vulnerabilityFilterDao.saveOrUpdate(vulnerabilityFilter);
		
		if (appId != -1) {
			vulnerabilityFilter.setApplication(applicationDao.retrieveById(appId));
			updateApplicationVulnerabilities(appId);
		} else if (orgId != -1) {
			Organization org = organizationDao.retrieveById(orgId);
			vulnerabilityFilter.setOrganization(org);
			updateOrganizationVulnerabilities(org);
		} else {
			vulnerabilityFilter.setGlobal(true);
			updateAllVulnerabilities();
		}
		vulnerabilityFilterDao.saveOrUpdate(vulnerabilityFilter);
	}

	public GenericVulnerability getGenericVulnerability(String formString) {
		GenericVulnerability returnValue = null;
		
		String result = getRegexResult(formString, "\\(CWE ([0-9]+)\\)");
		
		if (result != null) {
			// Try ID
			GenericVulnerability genericVulnerability =
					genericVulnerabilityDao.retrieveById(Integer.valueOf(result));
			if (genericVulnerability != null && genericVulnerability.getId() != null) {
				returnValue = genericVulnerability;
			}
		} else {
			// Try full name
			GenericVulnerability genericVulnerability =
					genericVulnerabilityDao.retrieveByName(formString);
			if (genericVulnerability != null && genericVulnerability.getId() != null) {
				returnValue = genericVulnerability;
			}
		}
		
		return returnValue;
	}
	
	protected String getRegexResult(String targetString, String regex) {
		if (targetString == null || targetString.isEmpty() || regex == null || regex.isEmpty()) {
			return null;
		}

		Pattern pattern = Pattern.compile(regex);
		Matcher matcher = pattern.matcher(targetString);

		if (matcher.find()) {
			return matcher.group(1);
		} else {
			return null;
		}
	}

	@Transactional
	@Override
	public void delete(int filterId, int orgId, int appId) {
		vulnerabilityFilterDao.delete(filterId);
		updateVulnerabilities(orgId, appId);
	}
	
	@Override
	public void updateVulnerabilities(Scan scan) {
		
		if (scan != null && scan.getFindings() != null) {
			
			List<Vulnerability> vulns = new ArrayList<>();
			
			for (Finding finding : scan.getFindings()) {
				if (finding != null && finding.getVulnerability() != null) {
					vulns.add(finding.getVulnerability());
				}
			}
			
			int orgId = scan.getApplication().getOrganization().getId(),
					appId = scan.getApplication().getId();
			
			List<VulnerabilityFilter> filters = vulnerabilityFilterDao.retrieveAllEffective(orgId, appId);
			
			updateVulnerabilities(vulns, filters, severityFilterService.loadEffectiveFilter(orgId, appId));
		}
	}
	
	// These methods all eventually call updateApplicationVulnerabilities.
	// They can't call updateVulnerabilities(List<Vulnerability>) directly because
	// they need to load the application's filters as well.
	@Override
	@Transactional
	public void updateVulnerabilities(int orgId, int appId) {
		if (orgId == -1 && appId == -1) {
			updateAllVulnerabilities();
		} else if (appId != -1) {
			updateApplicationVulnerabilities(appId);
		} else {
			updateOrganizationVulnerabilities(organizationDao.retrieveById(orgId));
		}
	}
	
	private void updateAllVulnerabilities() {
		for (Organization organization : organizationDao.retrieveAllNoOrder()) {
			updateOrganizationVulnerabilities(organization);
		}
	}

	private void updateOrganizationVulnerabilities(Organization organization) {
		if (organization != null && organization.getApplications() != null) {
			for (Application application : organization.getApplications()) {
				if (application != null) {
					updateApplicationVulnerabilities(application.getId());
				}
			}
		}
	}
	
	public void updateApplicationVulnerabilities(int appId) {
		
		Application application = applicationDao.retrieveById(appId);
		if (application != null &&
				application.getOrganization() != null &&
				application.getOrganization().getId() != null) {
			
			List<VulnerabilityFilter> filters =
					vulnerabilityFilterDao.retrieveAllEffective(application.getOrganization().getId(), appId);
			
			List<Vulnerability> vulns = vulnerabilityDao.retrieveAllByApplication(appId);
			
			updateVulnerabilities(vulns, filters, severityFilterService.loadEffectiveFilter(application.getOrganization().getId(), appId));
		}
	}
	
	private void updateVulnerabilities(List<Vulnerability> vulnerabilities,
			List<VulnerabilityFilter> vulnerabilityFilters,
			SeverityFilter severityFilters) {
		if (vulnerabilities == null || vulnerabilityFilters == null) {
			return;
		}
		
		Map<Integer, GenericSeverity> map = getMap(vulnerabilityFilters);
		
		for (Vulnerability vulnerability : vulnerabilities) {
			if (vulnerability != null && vulnerability.getOriginalGenericSeverity() != null) {
				boolean hiddenByVulnFilter = false;
				
				if (map.containsKey(vulnerability.getGenericVulnerability().getId())) {
					GenericSeverity value = map.get(vulnerability.getGenericVulnerability().getId());
					if (value == null) {
						hiddenByVulnFilter = true;
					} else {
						vulnerability.setGenericSeverity(value);
					}
				} else {
					vulnerability.setGenericSeverity(vulnerability.getOriginalGenericSeverity());
				}
				
				boolean shouldHide = hiddenByVulnFilter || severityFilters.shouldHide(vulnerability.getGenericSeverity());
				vulnerability.setHidden(shouldHide);
				
				vulnerabilityDao.saveOrUpdate(vulnerability);
			}
		}
	}
	
	public Map<Integer, GenericSeverity> getMap(List<VulnerabilityFilter> filters) {
		Map<Integer, GenericSeverity> returnMap = new HashMap<>();
		
		// add global stuff first
		for (VulnerabilityFilter filter : filters) {
			if (filter.getGlobal()) {
				returnMap.put(
						filter.getSourceGenericVulnerability().getId(),
						filter.getTargetGenericSeverity());
			}
		}
		
		// then organization
		for (VulnerabilityFilter filter : filters) {
			if (filter.getOrganization() != null) {
				returnMap.put(
						filter.getSourceGenericVulnerability().getId(),
						filter.getTargetGenericSeverity());
			}
		}
		
		// then application
		for (VulnerabilityFilter filter : filters) {
			if (filter.getApplication() != null) {
				returnMap.put(
						filter.getSourceGenericVulnerability().getId(),
						filter.getTargetGenericSeverity());
			}
		}
		
		return returnMap;
	}

	public List<VulnerabilityFilter> loadAllGlobal() {
		return vulnerabilityFilterDao.retrieveAllGlobal();
	}

	public List<VulnerabilityFilter> loadAllOrganization(int orgId) {
		return vulnerabilityFilterDao.retrieveAll(orgId);
	}

	public List<VulnerabilityFilter> loadAllApplication(int appId) {
		Application application = applicationDao.retrieveById(appId);
		if (application != null &&
				application.getOrganization() != null &&
				application.getOrganization().getId() != null) {
			return vulnerabilityFilterDao.retrieveAll(application.getOrganization().getId(), appId);
		} else {
			return new ArrayList<>();
		}
	}
	
	@Override
	public VulnerabilityFilter getNewFilter(int orgId, int appId) {
		VulnerabilityFilter vulnerabilityFilter = new VulnerabilityFilter();
		if (appId != -1) {
			vulnerabilityFilter.setApplication(applicationDao.retrieveById(appId));
		} else if (orgId != -1) {
			vulnerabilityFilter.setOrganization(organizationDao.retrieveById(orgId));
		} else {
			vulnerabilityFilter.setGlobal(true);
		}
		return vulnerabilityFilter;
	}
	
	@Override
	public List<VulnerabilityFilter> getPrimaryVulnerabilityList(int orgId, int appId) {
		List<VulnerabilityFilter> filters;
		if (appId != -1) {
			filters = loadAllApplication(appId);
		} else if (orgId != -1) {
			filters = loadAllOrganization(orgId);
		} else {
			filters = loadAllGlobal();
		}
		return filters;
	}
}
