////////////////////////////////////////////////////////////////////////
//
//     Copyright (c) 2009-2013 Denim Group, Ltd.
//
//     The contents of this file are subject to the Mozilla Public License
//     Version 2.0 (the "License"); you may not use this file except in
//     compliance with the License. You may obtain a copy of the License at
//     http://www.mozilla.org/MPL/
//
//     Software distributed under the License is distributed on an "AS IS"
//     basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//     License for the specific language governing rights and limitations
//     under the License.
//
//     The Original Code is ThreadFix.
//
//     The Initial Developer of the Original Code is Denim Group, Ltd.
//     Portions created by Denim Group, Ltd. are Copyright (C)
//     Denim Group, Ltd. All Rights Reserved.
//
//     Contributor(s): Denim Group, Ltd.
//
////////////////////////////////////////////////////////////////////////
package com.denimgroup.threadfix.service;

import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.validation.BindingResult;

import com.denimgroup.threadfix.data.dao.GenericSeverityDao;
import com.denimgroup.threadfix.data.dao.GenericVulnerabilityDao;
import com.denimgroup.threadfix.data.dao.VulnerabilityFilterDao;
import com.denimgroup.threadfix.data.entities.GenericSeverity;
import com.denimgroup.threadfix.data.entities.GenericVulnerability;
import com.denimgroup.threadfix.data.entities.VulnerabilityFilter;

@Service
public class VulnerabilityFilterServiceImpl implements VulnerabilityFilterService {
	
	private VulnerabilityFilterDao vulnerabilityFilterDao;
	private GenericVulnerabilityDao genericVulnerabilityDao;
	private GenericSeverityDao genericSeverityDao;
	
	@Autowired
	public VulnerabilityFilterServiceImpl(
			GenericSeverityDao genericSeverityDao,
			VulnerabilityFilterDao vulnerabilityFilterDao,
			GenericVulnerabilityDao genericVulnerabilityDao) {
		this.vulnerabilityFilterDao = vulnerabilityFilterDao;
		this.genericSeverityDao = genericSeverityDao;
		this.genericVulnerabilityDao = genericVulnerabilityDao;
	}

	@Override
	public List<VulnerabilityFilter> loadAll() {
		return vulnerabilityFilterDao.retrieveAll();
	}

	@Override
	public VulnerabilityFilter load(int vulnFilterId) {
		return vulnerabilityFilterDao.retrieveById(vulnFilterId);
	}

	@Override
	public void validate(VulnerabilityFilter vulnerabilityFilter, BindingResult bindingResult) {
		if (vulnerabilityFilter == null || vulnerabilityFilter == null) {
			bindingResult.rejectValue("sourceGenericVulnerability.name", null, "This vulnerability was not found.");
			return;
		}
		
		GenericVulnerability vuln = getGenericVulnerability(
				vulnerabilityFilter.getSourceGenericVulnerability().getName());
		
		int vulnId = -1;
		if (vuln != null) {
			vulnId = vuln.getId();
			vulnerabilityFilter.setSourceGenericVulnerability(vuln);
		}
		
		GenericSeverity severity = genericSeverityDao.retrieveById(
				vulnerabilityFilter.getTargetGenericSeverity().getId());
		
		int severityId = -1;
		if (severity != null) {
			severityId = severity.getId();
			vulnerabilityFilter.setTargetGenericSeverity(severity);
		}
		
		VulnerabilityFilter filter = vulnerabilityFilterDao.retrieveByVulnerabilityAndSeverity(
				vulnId, severityId);
		
		if (filter != null) {
			bindingResult.rejectValue("sourceGenericVulnerability.name", null, "This filter already exists.");
		} else if (vuln == null) {
			bindingResult.rejectValue("sourceGenericVulnerability.name", null, "This vulnerability was not found.");
		} else if (severity == null) {
			bindingResult.rejectValue("sourceGenericSeverity.id", null, "This severity was not found.");
		}
	}

	@Override
	public void save(VulnerabilityFilter vulnerabilityFilter) {
		vulnerabilityFilterDao.saveOrUpdate(vulnerabilityFilter);
	}

	public GenericVulnerability getGenericVulnerability(String formString) {
		GenericVulnerability returnValue = null;
		
		String result = getRegexResult(formString, "\\(CWE ([0-9]+)\\)");
		
		if (result != null) {
			GenericVulnerability genericVulnerability = 
					genericVulnerabilityDao.retrieveById(Integer.valueOf(result));
			if (genericVulnerability != null && genericVulnerability.getId() != null) {
				returnValue = genericVulnerability;
			}
		}
		
		return returnValue;
	}
	
	protected String getRegexResult(String targetString, String regex) {
		if (targetString == null || targetString.isEmpty() || regex == null || regex.isEmpty()) {
			return null;
		}

		Pattern pattern = Pattern.compile(regex);
		Matcher matcher = pattern.matcher(targetString);

		if (matcher.find())
			return matcher.group(1);
		else
			return null;
	}

}
