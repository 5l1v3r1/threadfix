////////////////////////////////////////////////////////////////////////
//
//     Copyright (c) 2009-2011 Denim Group, Ltd.
//
//     The contents of this file are subject to the Mozilla Public License
//     Version 1.1 (the "License"); you may not use this file except in
//     compliance with the License. You may obtain a copy of the License at
//     http://www.mozilla.org/MPL/
//
//     Software distributed under the License is distributed on an "AS IS"
//     basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//     License for the specific language governing rights and limitations
//     under the License.
//
//     The Original Code is Vulnerability Manager.
//
//     The Initial Developer of the Original Code is Denim Group, Ltd.
//     Portions created by Denim Group, Ltd. are Copyright (C)
//     Denim Group, Ltd. All Rights Reserved.
//
//     Contributor(s): Denim Group, Ltd.
//
////////////////////////////////////////////////////////////////////////
package com.denimgroup.threadfix.data.dao.hibernate;

import java.util.List;

import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.denimgroup.threadfix.data.dao.VulnerabilityMapLogDao;
import com.denimgroup.threadfix.data.entities.ChannelType;
import com.denimgroup.threadfix.data.entities.VulnerabilityMapLog;

/**
 * Hibernate VulnerabilityMapLog DAO implementation. Most basic methods are
 * implemented in the AbstractGenericDao
 * 
 * @author mcollins, dwolf
 * @see AbstractGenericDao
 */
@Repository
public class HibernateVulnerabilityMapLogDao implements VulnerabilityMapLogDao {

	private SessionFactory sessionFactory;

	@Autowired
	public HibernateVulnerabilityMapLogDao(SessionFactory sessionFactory) {
		this.sessionFactory = sessionFactory;
	}

	@Override
	@SuppressWarnings("unchecked")
	public List<VulnerabilityMapLog> retrieveAll() {
		return sessionFactory
				.getCurrentSession()
				.createQuery(
						"from VulnerabilityMapLog vulnerabilityMapLog order by vulnerabilityMapLog.name")
				.list();
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<VulnerabilityMapLog> retrieveAllOpen() {
		return sessionFactory
				.getCurrentSession()
				.createQuery(
						"from VulnerabilityMapLog vulnerabilityMapLog where vulnerabilityMapLog.isResolved = :false")
				.setBoolean("false", false).list();
	}

	@Override
	public VulnerabilityMapLog retrieveByChannelVulnNameAndChannelType(String channelVulnName,
			ChannelType channel) {
		return (VulnerabilityMapLog) sessionFactory
				.getCurrentSession()
				.createQuery(
						"from VulnerabilityMapLog vulnerabilityMapLog where vulnerabilityMapLog.channelVulnName = :channelVulnName"
								+ " AND vulnerabilityMapLog.channelType = :channelType")
				.setString("channelVulnName", channelVulnName)
				.setInteger("channelType", channel.getId()).uniqueResult();
	}

	@Override
	public VulnerabilityMapLog retrieveById(int id) {
		return (VulnerabilityMapLog) sessionFactory.getCurrentSession().get(
				VulnerabilityMapLog.class, id);
	}

	@Override
	public void saveOrUpdate(VulnerabilityMapLog vulnerabilityMapLog) {
		sessionFactory.getCurrentSession().saveOrUpdate(vulnerabilityMapLog);
	}

}
