////////////////////////////////////////////////////////////////////////
//
//     Copyright (c) 2009-2011 Denim Group, Ltd.
//
//     The contents of this file are subject to the Mozilla Public License
//     Version 1.1 (the "License"); you may not use this file except in
//     compliance with the License. You may obtain a copy of the License at
//     http://www.mozilla.org/MPL/
//
//     Software distributed under the License is distributed on an "AS IS"
//     basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//     License for the specific language governing rights and limitations
//     under the License.
//
//     The Original Code is Vulnerability Manager.
//
//     The Initial Developer of the Original Code is Denim Group, Ltd.
//     Portions created by Denim Group, Ltd. are Copyright (C)
//     Denim Group, Ltd. All Rights Reserved.
//
//     Contributor(s): Denim Group, Ltd.
//
////////////////////////////////////////////////////////////////////////
package com.denimgroup.threadfix.webapp.controller;

import java.util.Calendar;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.denimgroup.threadfix.data.entities.Finding;
import com.denimgroup.threadfix.data.entities.SurfaceLocation;
import com.denimgroup.threadfix.data.entities.Vulnerability;
import com.denimgroup.threadfix.service.SanitizedLogger;
import com.denimgroup.threadfix.service.VulnerabilityService;

@Controller
@RequestMapping("/organizations/{orgId}/applications/{appId}/vulnerabilities")
public class VulnerabilityController {

	private VulnerabilityService vulnerabilityService;
	
	private final SanitizedLogger log = new SanitizedLogger(VulnerabilityController.class);

	@Autowired
	public VulnerabilityController(VulnerabilityService vulnerabilityService) {
		this.vulnerabilityService = vulnerabilityService;
	}
	
	public VulnerabilityController(){}

	// switched to not show our guess as to static surfaceLocations - only show
	// surfaceLocation for dynamic scans.
	@RequestMapping(value = "/{vulnerabilityId}", method = RequestMethod.GET)
	public String showForm(@PathVariable("appId") int appId, @PathVariable("orgId") int orgId,
			@PathVariable("vulnerabilityId") int vulnerabilityId, ModelMap model) {
		Vulnerability vulnerability = vulnerabilityService.loadVulnerability(vulnerabilityId);
		
		if (vulnerability == null) {
			log.warn(ResourceNotFoundException.getLogMessage("Vulnerability", vulnerabilityId));
			throw new ResourceNotFoundException();
		}
		
		String[] times = vulnerabilityService.getTimeDifferences(vulnerability);
		SurfaceLocation surfaceLocation = vulnerabilityService
				.getSurfaceLocationFromDynamicFinding(vulnerability);
		List<Finding> staticFindingList = vulnerabilityService.getStaticFindings(vulnerability);

		// if there's only one static finding, display its data flow elements.
		Finding singleStaticFinding = null;
		if (staticFindingList != null && staticFindingList.size() == 1) {
			singleStaticFinding = staticFindingList.get(0);
			staticFindingList = null;
		}

		model.addAttribute("singleStaticFinding", singleStaticFinding);
		model.addAttribute("staticFindingList", staticFindingList);
		model.addAttribute("surfaceLocation", surfaceLocation);
		model.addAttribute("vulnerability", vulnerability);
		model.addAttribute("timeArray", times);
		return "applications/vulnerability";
	}

	@RequestMapping(value = "/{vulnerabilityId}/defect", method = RequestMethod.GET)
	public String viewDefect(@PathVariable("appId") int appId, @PathVariable("orgId") int orgId,
			@PathVariable("vulnerabilityId") int vulnerabilityId, ModelMap model) {
		Vulnerability vulnerability = vulnerabilityService.loadVulnerability(vulnerabilityId);
		
		if (vulnerability == null) {
			log.warn(ResourceNotFoundException.getLogMessage("Vulnerability", vulnerabilityId));
			throw new ResourceNotFoundException();
		}
		
		if (vulnerability.getDefect() == null) {
			log.warn("The requested Vulnerability did not have an associated Defect, returning to the Vulnerability page.");
			return "redirect:/organizations/" + orgId + "/applications/" + appId + "/vulnerabilities/" + vulnerabilityId;
		}
		
		model.addAttribute("defect", vulnerability.getDefect());
		return "applications/defects";
	}
	
	@PreAuthorize("hasRole('ROLE_CAN_MODIFY_VULNERABILITIES')")
	@RequestMapping(value = "/{vulnerabilityId}/close", method = RequestMethod.GET)
	public String closeVulnerability(@PathVariable("vulnerabilityId") int vulnerabilityId, 
			@PathVariable("appId") int appId, @PathVariable("orgId") int orgId, ModelMap model) {
		Vulnerability vulnerability = vulnerabilityService.loadVulnerability(vulnerabilityId);
		
		if (vulnerability == null) {
			log.warn(ResourceNotFoundException.getLogMessage("Vulnerability", vulnerabilityId));
			throw new ResourceNotFoundException();
		}
		
		vulnerability.closeVulnerability(null, Calendar.getInstance());
		vulnerability.setFoundByScanner(false);
		vulnerabilityService.storeVulnerability(vulnerability);
		return "redirect:/organizations/" + orgId + "/applications/" + appId + "/vulnerabilities/" + vulnerabilityId;
	}
	
	@PreAuthorize("hasRole('ROLE_CAN_MODIFY_VULNERABILITIES')")
	@RequestMapping(value = "/{vulnerabilityId}/open", method = RequestMethod.GET)
	public String openVulnerability(@PathVariable("vulnerabilityId") int vulnerabilityId, 
			@PathVariable("appId") int appId, @PathVariable("orgId") int orgId, ModelMap model) {
		Vulnerability vulnerability = vulnerabilityService.loadVulnerability(vulnerabilityId);
		vulnerability.setActive(true);
		vulnerabilityService.storeVulnerability(vulnerability);
		return "redirect:/organizations/" + orgId + "/applications/" + appId + "/vulnerabilities/" + vulnerabilityId;
	}
	
	@PreAuthorize("hasRole('ROLE_CAN_MODIFY_VULNERABILITIES')")
	@RequestMapping(value = "/{vulnerabilityId}/markFalsePositive", method = RequestMethod.GET)
	public String markFalsePositive(@PathVariable("vulnerabilityId") int vulnerabilityId, 
			@PathVariable("appId") int appId, @PathVariable("orgId") int orgId, ModelMap model) {
		Vulnerability vulnerability = vulnerabilityService.loadVulnerability(vulnerabilityId);
		
		if (vulnerability == null) {
			log.warn(ResourceNotFoundException.getLogMessage("Vulnerability", vulnerabilityId));
			throw new ResourceNotFoundException();
		}
		
		vulnerability.setIsFalsePositive(true);
		vulnerabilityService.storeVulnerability(vulnerability);
		return "redirect:/organizations/" + orgId + "/applications/" + appId + "/vulnerabilities/" + vulnerabilityId;
	}
	
	@PreAuthorize("hasRole('ROLE_CAN_MODIFY_VULNERABILITIES')")
	@RequestMapping(value = "/{vulnerabilityId}/markNotFalsePositive", method = RequestMethod.GET)
	public String markNotFalsePositive(@PathVariable("vulnerabilityId") int vulnerabilityId, 
			@PathVariable("appId") int appId, @PathVariable("orgId") int orgId, ModelMap model) {
		Vulnerability vulnerability = vulnerabilityService.loadVulnerability(vulnerabilityId);

		if (vulnerability == null) {
			log.warn(ResourceNotFoundException.getLogMessage("Vulnerability", vulnerabilityId));
			throw new ResourceNotFoundException();
		}
		
		vulnerability.setIsFalsePositive(false);
		vulnerabilityService.storeVulnerability(vulnerability);
		return "redirect:/organizations/" + orgId + "/applications/" + appId + "/vulnerabilities/" + vulnerabilityId;
	}

	@PreAuthorize("hasRole('ROLE_CAN_MODIFY_VULNERABILITIES')")
	@RequestMapping(value = "/{vulnerabilityId}/mergeFindings", method = RequestMethod.GET)
	public String mergeFinding(@PathVariable("vulnerabilityId") int vulnerabilityId, ModelMap model,
			@PathVariable("appId") int appId, @PathVariable("orgId") int orgId) {
		Vulnerability vulnerability = vulnerabilityService.loadVulnerability(vulnerabilityId);

		if (vulnerability == null) {
			log.warn(ResourceNotFoundException.getLogMessage("Vulnerability", vulnerabilityId));
			throw new ResourceNotFoundException();
		}
		
		if (vulnerability.getFindings() != null
				&& vulnerability.getFindings().size() != 0
				&& vulnerability.getFindings().size() != 1) {
			List<Finding> findings = vulnerability.getFindings();
			model.addAttribute(findings);
		}
		model.addAttribute(vulnerability);
		return "/applications/vulnerability";
	}

}
