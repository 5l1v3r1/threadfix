////////////////////////////////////////////////////////////////////////
//
//     Copyright (c) 2009-2013 Denim Group, Ltd.
//
//     The contents of this file are subject to the Mozilla Public License
//     Version 2.0 (the "License"); you may not use this file except in
//     compliance with the License. You may obtain a copy of the License at
//     http://www.mozilla.org/MPL/
//
//     Software distributed under the License is distributed on an "AS IS"
//     basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//     License for the specific language governing rights and limitations
//     under the License.
//
//     The Original Code is ThreadFix.
//
//     The Initial Developer of the Original Code is Denim Group, Ltd.
//     Portions created by Denim Group, Ltd. are Copyright (C)
//     Denim Group, Ltd. All Rights Reserved.
//
//     Contributor(s): Denim Group, Ltd.
//
////////////////////////////////////////////////////////////////////////
package com.denimgroup.threadfix.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.BindingResult;

import com.denimgroup.threadfix.data.dao.ApplicationDao;
import com.denimgroup.threadfix.data.dao.GenericSeverityDao;
import com.denimgroup.threadfix.data.dao.GenericVulnerabilityDao;
import com.denimgroup.threadfix.data.dao.VulnerabilityDao;
import com.denimgroup.threadfix.data.dao.VulnerabilityFilterDao;
import com.denimgroup.threadfix.data.entities.Application;
import com.denimgroup.threadfix.data.entities.Finding;
import com.denimgroup.threadfix.data.entities.GenericSeverity;
import com.denimgroup.threadfix.data.entities.GenericVulnerability;
import com.denimgroup.threadfix.data.entities.Scan;
import com.denimgroup.threadfix.data.entities.Vulnerability;
import com.denimgroup.threadfix.data.entities.VulnerabilityFilter;

@Service
public class VulnerabilityFilterServiceImpl implements VulnerabilityFilterService {
	
	private VulnerabilityFilterDao vulnerabilityFilterDao;
	private GenericVulnerabilityDao genericVulnerabilityDao;
	private GenericSeverityDao genericSeverityDao;
	private VulnerabilityDao vulnerabilityDao;
	private ApplicationDao applicationDao;
	
	@Autowired
	public VulnerabilityFilterServiceImpl(
			ApplicationDao applicationDao,
			VulnerabilityDao vulnerabilityDao,
			GenericSeverityDao genericSeverityDao,
			VulnerabilityFilterDao vulnerabilityFilterDao,
			GenericVulnerabilityDao genericVulnerabilityDao) {
		this.vulnerabilityDao = vulnerabilityDao;
		this.applicationDao = applicationDao;
		this.vulnerabilityFilterDao = vulnerabilityFilterDao;
		this.genericSeverityDao = genericSeverityDao;
		this.genericVulnerabilityDao = genericVulnerabilityDao;
	}

	@Override
	public VulnerabilityFilter load(int vulnFilterId) {
		return vulnerabilityFilterDao.retrieveById(vulnFilterId);
	}
	
	@Override
	public VulnerabilityFilter validate(VulnerabilityFilter vulnerabilityFilter, 
			BindingResult bindingResult) {
		return validate(vulnerabilityFilter, bindingResult, -1);
	}

	@Override
	public VulnerabilityFilter validate(VulnerabilityFilter vulnerabilityFilter, 
			BindingResult bindingResult, int id) {
		if (vulnerabilityFilter == null || vulnerabilityFilter == null ||
				vulnerabilityFilter.getSourceGenericVulnerability() == null ||
				vulnerabilityFilter.getTargetGenericSeverity() == null) {
			bindingResult.rejectValue("sourceGenericVulnerability.name", null, "This vulnerability was not found.");
			return null;
		}
		
		GenericVulnerability vuln = getGenericVulnerability(
				vulnerabilityFilter.getSourceGenericVulnerability().getName());
		
		int vulnId = -1;
		if (vuln != null) {
			vulnId = vuln.getId();
			vulnerabilityFilter.setSourceGenericVulnerability(vuln);
		}
		
		GenericSeverity severity = genericSeverityDao.retrieveById(
				vulnerabilityFilter.getTargetGenericSeverity().getId());
		
		int severityId = -1;
		if (severity != null) {
			severityId = severity.getId();
			vulnerabilityFilter.setTargetGenericSeverity(severity);
		}
		
		VulnerabilityFilter filter = vulnerabilityFilterDao.retrieveByVulnerabilityAndSeverity(
				vulnId, severityId);
		
		if (filter != null && filter.getId() != null && filter.getId() != id) {
			bindingResult.rejectValue("sourceGenericVulnerability.name", null, "This filter already exists.");
		} else if (vuln == null) {
			bindingResult.rejectValue("sourceGenericVulnerability.name", null, "This vulnerability was not found.");
		} else if (severity == null) {
			bindingResult.rejectValue("sourceGenericSeverity.id", null, "This severity was not found.");
		}
		
		return vulnerabilityFilter;
	}

	@Override
	@Transactional(readOnly=false)
	public void save(int appId, VulnerabilityFilter vulnerabilityFilter) {
		vulnerabilityFilterDao.saveOrUpdate(vulnerabilityFilter);
		updateVulnerabilities(appId);
	}

	public GenericVulnerability getGenericVulnerability(String formString) {
		GenericVulnerability returnValue = null;
		
		String result = getRegexResult(formString, "\\(CWE ([0-9]+)\\)");
		
		if (result != null) {
			// Try ID
			GenericVulnerability genericVulnerability = 
					genericVulnerabilityDao.retrieveById(Integer.valueOf(result));
			if (genericVulnerability != null && genericVulnerability.getId() != null) {
				returnValue = genericVulnerability;
			}
		} else {
			// Try full name
			GenericVulnerability genericVulnerability = 
					genericVulnerabilityDao.retrieveByName(formString);
			if (genericVulnerability != null && genericVulnerability.getId() != null) {
				returnValue = genericVulnerability;
			}
		}
		
		return returnValue;
	}
	
	protected String getRegexResult(String targetString, String regex) {
		if (targetString == null || targetString.isEmpty() || regex == null || regex.isEmpty()) {
			return null;
		}

		Pattern pattern = Pattern.compile(regex);
		Matcher matcher = pattern.matcher(targetString);

		if (matcher.find())
			return matcher.group(1);
		else
			return null;
	}

	@Transactional
	@Override
	public void delete(int appId, int filterId) {
		vulnerabilityFilterDao.delete(filterId);
		updateVulnerabilities(appId);
	}
	
	@Override
	public void updateVulnerabilities(Scan scan) {
		
		if (scan != null && scan.getFindings() != null) {
			
			List<Vulnerability> vulns = new ArrayList<>();
			
			for (Finding finding : scan.getFindings()) {
				if (finding != null && finding.getVulnerability() != null) {
					vulns.add(finding.getVulnerability());
				}
			}
			
			List<VulnerabilityFilter> filters = vulnerabilityFilterDao.retrieveAll(
					scan.getApplication().getOrganization().getId(), scan.getApplication().getId());
			
			
			updateVulnerabilities(vulns, filters);
		}
	}
	
	@Override
	public void updateVulnerabilities(int appId) {
		
		Application application = applicationDao.retrieveById(appId);
		if (application != null && 
				application.getOrganization() != null && 
				application.getOrganization().getId() != null) {
			
			List<VulnerabilityFilter> filters = 
					vulnerabilityFilterDao.retrieveAll(application.getOrganization().getId(), appId);
			
			List<Vulnerability> vulns = vulnerabilityDao.retrieveAllActiveByApplication(appId);
			
			updateVulnerabilities(vulns, filters);
		}
	}
	
	private void updateVulnerabilities(List<Vulnerability> vulnerabilities, List<VulnerabilityFilter> filters) {
		if (vulnerabilities == null || filters == null) {
			return;
		}
		
		Map<Integer, GenericSeverity> map = getMap(filters);
		
		for (Vulnerability vulnerability : vulnerabilities) {
			if (vulnerability != null && vulnerability.getOriginalGenericSeverity() != null) {
				if (map.containsKey(vulnerability.getGenericVulnerability().getId())) {
					vulnerability.setGenericSeverity(
							map.get(vulnerability.getGenericVulnerability().getId()));
				} else {
					vulnerability.setGenericSeverity(vulnerability.getOriginalGenericSeverity());
				}
				vulnerabilityDao.saveOrUpdate(vulnerability);
			}
		}
	}
	
	public Map<Integer, GenericSeverity> getMap(List<VulnerabilityFilter> filters) {
		Map<Integer, GenericSeverity> returnMap = new HashMap<>();
		
		for (VulnerabilityFilter filter : filters) {
			returnMap.put(
					filter.getSourceGenericVulnerability().getId(), 
					filter.getTargetGenericSeverity());
		}
		
		return returnMap;
	}

	@Override
	public List<VulnerabilityFilter> loadAllGlobal() {
		return vulnerabilityFilterDao.retrieveAllGlobal();
	}

	@Override
	public List<VulnerabilityFilter> loadAllOrganization(int orgId) {
		return vulnerabilityFilterDao.retrieveAll(orgId);
	}

	@Override
	public List<VulnerabilityFilter> loadAllApplication(int appId) {
		Application application = applicationDao.retrieveById(appId);
		if (application != null && 
				application.getOrganization() != null && 
				application.getOrganization().getId() != null) {
			return vulnerabilityFilterDao.retrieveAll(application.getOrganization().getId(), appId);
		} else {
			return new ArrayList<>();
		}
	}
}
