////////////////////////////////////////////////////////////////////////
//
//     Copyright (c) 2009-2013 Denim Group, Ltd.
//
//     The contents of this file are subject to the Mozilla Public License
//     Version 2.0 (the "License"); you may not use this file except in
//     compliance with the License. You may obtain a copy of the License at
//     http://www.mozilla.org/MPL/
//
//     Software distributed under the License is distributed on an "AS IS"
//     basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//     License for the specific language governing rights and limitations
//     under the License.
//
//     The Original Code is ThreadFix.
//
//     The Initial Developer of the Original Code is Denim Group, Ltd.
//     Portions created by Denim Group, Ltd. are Copyright (C)
//     Denim Group, Ltd. All Rights Reserved.
//
//     Contributor(s): Denim Group, Ltd.
//
////////////////////////////////////////////////////////////////////////
package com.denimgroup.threadfix.webapp.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.bind.support.SessionStatus;

import com.denimgroup.threadfix.data.entities.GenericSeverity;
import com.denimgroup.threadfix.data.entities.GenericVulnerability;
import com.denimgroup.threadfix.data.entities.VulnerabilityFilter;
import com.denimgroup.threadfix.service.ApplicationService;
import com.denimgroup.threadfix.service.GenericSeverityService;
import com.denimgroup.threadfix.service.GenericVulnerabilityService;
import com.denimgroup.threadfix.service.VulnerabilityFilterService;

@Controller
@RequestMapping("/organizations/{orgId}/applications/{appId}/filters")
@SessionAttributes("vulnerabilityFilter")
public class VulnerabilityFilterController {
	
	private VulnerabilityFilterService vulnerabilityFilterService;
	private GenericVulnerabilityService genericVulnerabilityService;
	private GenericSeverityService genericSeverityService;
	private ApplicationService applicationService;
	
	@ModelAttribute("genericVulnerabilities")
	public List<GenericVulnerability> getGenericVulnerabilities() {
		return genericVulnerabilityService.loadAll();
	}
	
	@ModelAttribute("genericSeverities")
	public List<GenericSeverity> getGenericSeverities() {
		return genericSeverityService.loadAll();
	}
	
	@Autowired
	public VulnerabilityFilterController(
			VulnerabilityFilterService vulnerabilityFilterService,
			ApplicationService applicationService,
			GenericVulnerabilityService genericVulnerabilityService,
			GenericSeverityService genericSeverityService) {
		this.applicationService = applicationService;
		this.vulnerabilityFilterService = vulnerabilityFilterService;
		this.genericVulnerabilityService = genericVulnerabilityService;
		this.genericSeverityService = genericSeverityService;
	}

	@RequestMapping(method = RequestMethod.GET)
	public String index(@PathVariable int appId, Model model) {
		VulnerabilityFilter vulnerabilityFilter = new VulnerabilityFilter();
		vulnerabilityFilter.setApplication(applicationService.loadApplication(appId));
		model.addAttribute("vulnerabilityFilter", vulnerabilityFilter);
		model.addAttribute("vulnerabilityFilterList", vulnerabilityFilterService.loadAll());
		return "filters/index";
	}
	
	@RequestMapping(value = "/new", method = RequestMethod.POST)
	public String submitNew(@PathVariable int appId,
			VulnerabilityFilter vulnerabilityFilter, 
			BindingResult bindingResult, 
			SessionStatus status, 
			Model model) {

		vulnerabilityFilter.setApplication(applicationService.loadApplication(appId));
		
		String responsePage = null;
		
		if (!bindingResult.hasErrors()) {
			vulnerabilityFilterService.validate(vulnerabilityFilter, bindingResult);
		}
		
		if (bindingResult.hasErrors()) {
			model.addAttribute("contentPage", "filters/newForm.jsp");
			responsePage = "ajaxFailureHarness";
			System.out.println("failure");
		} else {
			vulnerabilityFilterService.save(vulnerabilityFilter);
			status.setComplete();
			model.addAttribute("vulnerabilityFilter", new VulnerabilityFilter());
			model.addAttribute("contentPage", "filters/table.jsp");
			model.addAttribute("vulnerabilityFilterList", vulnerabilityFilterService.loadAll());
			responsePage = "ajaxSuccessHarness";
			System.out.println("success");
		}
		
		return responsePage;
	}
	
	@RequestMapping(value = "/{filterId}/edit", method = RequestMethod.POST)
	public String submitEdit(@PathVariable int appId,
			@PathVariable int filterId, 
			VulnerabilityFilter vulnerabilityFilter, 
			BindingResult bindingResult, 
			SessionStatus status, 
			Model model) {
		
		vulnerabilityFilter.setApplication(applicationService.loadApplication(appId));
		
		String responsePage = null;
		
		if (!bindingResult.hasErrors()) {
			vulnerabilityFilter = vulnerabilityFilterService.validate(vulnerabilityFilter, bindingResult, appId);
		}
		
		if (bindingResult.hasErrors()) {
			model.addAttribute("contentPage", "filters/newForm.jsp");
			responsePage = "ajaxFailureHarness";
			System.out.println("failure");
		} else {
			vulnerabilityFilter.setId(filterId);
			vulnerabilityFilterService.save(vulnerabilityFilter);
			status.setComplete();
			model.addAttribute("vulnerabilityFilter", new VulnerabilityFilter());
			model.addAttribute("contentPage", "filters/table.jsp");
			model.addAttribute("vulnerabilityFilterList", vulnerabilityFilterService.loadAll());
			responsePage = "ajaxSuccessHarness";
			System.out.println("success");
		}
		
		return responsePage;
	}
}
