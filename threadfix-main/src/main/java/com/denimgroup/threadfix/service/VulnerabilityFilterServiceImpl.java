////////////////////////////////////////////////////////////////////////
//
//     Copyright (c) 2009-2015 Denim Group, Ltd.
//
//     The contents of this file are subject to the Mozilla Public License
//     Version 2.0 (the "License"); you may not use this file except in
//     compliance with the License. You may obtain a copy of the License at
//     http://www.mozilla.org/MPL/
//
//     Software distributed under the License is distributed on an "AS IS"
//     basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//     License for the specific language governing rights and limitations
//     under the License.
//
//     The Original Code is ThreadFix.
//
//     The Initial Developer of the Original Code is Denim Group, Ltd.
//     Portions created by Denim Group, Ltd. are Copyright (C)
//     Denim Group, Ltd. All Rights Reserved.
//
//     Contributor(s): Denim Group, Ltd.
//
////////////////////////////////////////////////////////////////////////

package com.denimgroup.threadfix.service;

import com.denimgroup.threadfix.data.dao.*;
import com.denimgroup.threadfix.data.entities.*;
import com.denimgroup.threadfix.logging.SanitizedLogger;
import com.denimgroup.threadfix.service.queue.QueueSender;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.BindingResult;

import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import static com.denimgroup.threadfix.CollectionUtils.list;

@Service
public class VulnerabilityFilterServiceImpl implements VulnerabilityFilterService {

    @Autowired
    private VulnerabilityFilterDao  vulnerabilityFilterDao;
    @Autowired
    private GenericVulnerabilityDao genericVulnerabilityDao;
    @Autowired
    private GenericSeverityDao      genericSeverityDao;
    @Autowired
    private VulnerabilityDao        vulnerabilityDao;
    @Autowired
    private ApplicationDao          applicationDao;
    @Autowired
    private OrganizationDao         organizationDao;
    @Autowired
    private SeverityFilterService   severityFilterService;
    @Autowired
    private ScanDao                 scanDao;
    @Autowired
    private QueueSender             queueSender;
    @Autowired
    private VulnerabilityService vulnerabilityService;
    @Autowired
    private ApplicationService applicationService;
	@Autowired
	private StatisticsCounterService statisticsCounterService;

    private final SanitizedLogger log = new SanitizedLogger(VulnerabilityFilterServiceImpl.class);
    @Override
    public VulnerabilityFilter load(int vulnFilterId) {
        return vulnerabilityFilterDao.retrieveById(vulnFilterId);
    }

    @Override
    public VulnerabilityFilter validate(VulnerabilityFilter vulnerabilityFilter,
                                        BindingResult bindingResult) {
        return validate(vulnerabilityFilter, bindingResult, -1);
    }

    @Override
    public VulnerabilityFilter validate(
            VulnerabilityFilter vulnerabilityFilter,
            BindingResult bindingResult,
            int id) {
        if (vulnerabilityFilter == null ||
                vulnerabilityFilter.getSourceGenericVulnerability() == null ||
                vulnerabilityFilter.getTargetGenericSeverity() == null) {
            bindingResult.rejectValue("sourceGenericVulnerability.name", null, "This vulnerability was not found.");
            return null;
        }

        GenericVulnerability vuln = getGenericVulnerability(
				vulnerabilityFilter.getSourceGenericVulnerability().getName());

        int vulnId = -1;
        if (vuln != null) {
			vulnId = vuln.getId();
			vulnerabilityFilter.setSourceGenericVulnerability(vuln);
		}

		boolean hasSeverity = false;
		if (vulnerabilityFilter.getTargetGenericSeverity().getId() == -1) {
			hasSeverity = true;
			vulnerabilityFilter.setTargetGenericSeverity(null);
			vulnerabilityFilter.setHide(true);
		} else {
			GenericSeverity severity = genericSeverityDao.retrieveById(
					vulnerabilityFilter.getTargetGenericSeverity().getId());
			hasSeverity = severity != null;
			if (hasSeverity) {
				vulnerabilityFilter.setHide(false);
				vulnerabilityFilter.setTargetGenericSeverity(severity);
			}
		}

		VulnerabilityFilter databaseFilter = vulnerabilityFilterDao.retrieveByVulnerabilityAndType(
				vulnId, vulnerabilityFilter);

		if (databaseFilter != null && databaseFilter.getId() != null && databaseFilter.getId() != id) {
			bindingResult.rejectValue("sourceGenericVulnerability.name", null, "This filter already exists.");
		} else if (vuln == null) {
			bindingResult.rejectValue("sourceGenericVulnerability.name", null, "This vulnerability was not found.");
		} else if (!hasSeverity) {
			bindingResult.rejectValue("targetGenericSeverity.id", null, "This severity was not found.");
		}

		return vulnerabilityFilter;
	}

	@Override
	@Transactional(readOnly=false)
	public void save(VulnerabilityFilter vulnerabilityFilter, int orgId, int appId) {
		if (vulnerabilityFilter != null) {

			vulnerabilityFilterDao.saveOrUpdate(vulnerabilityFilter);

			if (appId != -1) {
				Application application = applicationDao.retrieveById(appId);
				vulnerabilityFilter.setApplication(application);
				filterVulnerabilitiesForApplication(application);
			} else if (orgId != -1) {
				Organization org = organizationDao.retrieveById(orgId);
				vulnerabilityFilter.setOrganization(org);
				updateOrganizationVulnerabilities(org);
			} else {
				vulnerabilityFilter.setGlobal(true);

                queueSender.updateVulnFilter();
			}
			vulnerabilityFilterDao.saveOrUpdate(vulnerabilityFilter);
            log.info("Saving Vulnerability Filter with ID " + vulnerabilityFilter.getId() + ".");
		}
	}

	public GenericVulnerability getGenericVulnerability(String formString) {
		GenericVulnerability returnValue = null;

		String result = getRegexResult(formString, "\\(CWE ([0-9]+)\\)");

		if (result != null) {
			// Try ID
			GenericVulnerability genericVulnerability =
					genericVulnerabilityDao.retrieveByDisplayId(Integer.valueOf(result));
			if (genericVulnerability != null && genericVulnerability.getId() != null) {
				returnValue = genericVulnerability;
			}
		} else {
			// Try full name
			GenericVulnerability genericVulnerability =
					genericVulnerabilityDao.retrieveByName(formString);
			if (genericVulnerability != null && genericVulnerability.getId() != null) {
				returnValue = genericVulnerability;
			}
		}

		return returnValue;
	}

	protected String getRegexResult(String targetString, String regex) {
		if (targetString == null || targetString.isEmpty() || regex == null || regex.isEmpty()) {
			return null;
		}

		Pattern pattern = Pattern.compile(regex);
		Matcher matcher = pattern.matcher(targetString);

		if (matcher.find()) {
			return matcher.group(1);
		} else {
			return null;
		}
	}

	@Transactional
	@Override
	public void delete(int filterId, int orgId, int appId) {
		log.info("Deleting Vulnerability Filter.");
		vulnerabilityFilterDao.delete(filterId);
		updateVulnerabilities(orgId, appId);
	}

	@Override
	public void updateVulnerabilities(Scan scan) {

		scanDao.saveOrUpdate(scan);

		if (scan != null && scan.getApplication() != null) {
			filterVulnerabilitiesForApplication(scan.getApplication());
		}
	}

	private void filterVulnerabilitiesForApplication(Application application) {

		int appId = application.getId();
		int orgId = application.getOrganization().getId();

		List<VulnerabilityFilter> filters = vulnerabilityFilterDao.retrieveAllEffective(orgId, appId);

		SeverityFilter severityFilter = severityFilterService.loadEffectiveFilter(orgId, appId);

		vulnerabilityFilterDao.resetHiddenForApplication(appId);

		for (VulnerabilityFilter filter : filters) {
			vulnerabilityFilterDao.applyFilterToApplication(appId, filter);
		}

		vulnerabilityFilterDao.applySeverityFilterToApplication(appId, severityFilter);

		vulnerabilityService.updateVulnerabilityReport(
				applicationService.loadApplication(appId)
		);
	}

	// These methods all eventually call updateApplicationVulnerabilities.
	// They can't call updateVulnerabilities(List<Vulnerability>) directly because
	// they need to load the application's filters as well.
	@Override
	@Transactional
	public void updateVulnerabilities(int orgId, int appId) {
		if (orgId == -1 && appId == -1) {
			log.info("Sending Updating all ThreadFix Vulnerabilities to QueueSender.");
            queueSender.updateVulnFilter();
		} else if (appId != -1) {
			Application app = applicationDao.retrieveById(appId);
			log.info("Updating ThreadFix Vulnerabilities for application " + app.getName());
			updateApplicationVulnerabilities(app);
		} else {
			Organization organization = organizationDao.retrieveById(orgId);
			log.info("Updating ThreadFix Vulnerabilities for team " + organization.getName());
			updateOrganizationVulnerabilities(organization);
		}
	}

    @Override
	public void updateAllVulnerabilities() {

		vulnerabilityFilterDao.resetHiddenAll();

		applyAllVulnerabilityFilters();
		applyAllSeverityFilters();

		List<Application> applications = applicationService.loadAllActive();

		for (Application application : applications) {
			vulnerabilityService.updateVulnerabilityReport(application);
		}

		updateAllScans();
	}

	private void applyAllSeverityFilters() {
		List<SeverityFilter> severityFilters = severityFilterService.loadAllFilters();

		List<SeverityFilter> teamFilters = list(), applicationFilters = list();

		for (SeverityFilter filter : severityFilters) {
			if (filter.getOrganization() != null) {
				teamFilters.add(filter);
			} else if (filter.getApplication() != null) {
				applicationFilters.add(filter);
			} else {
				vulnerabilityFilterDao.applySeverityFilterGlobal(filter);
			}
		}

		for (SeverityFilter teamFilter : teamFilters) {
			vulnerabilityFilterDao.applySeverityFilterToTeam(teamFilter.getOrganization().getId(), teamFilter);
		}

		for (SeverityFilter applicationFilter : applicationFilters) {
			vulnerabilityFilterDao.applySeverityFilterToApplication(applicationFilter.getApplication().getId(), applicationFilter);
		}
	}

	private void applyAllVulnerabilityFilters() {
		List<VulnerabilityFilter> filters = vulnerabilityFilterDao.retrieveAll();

		List<VulnerabilityFilter> teamFilters = list(), applicationFilters = list();

		for (VulnerabilityFilter filter : filters) {
			if (filter.getOrganization() != null) {
				teamFilters.add(filter);
			} else if (filter.getApplication() != null) {
				applicationFilters.add(filter);
			} else {
				vulnerabilityFilterDao.applyFilterGlobal(filter);
			}
		}

		for (VulnerabilityFilter teamFilter : teamFilters) {
			vulnerabilityFilterDao.applyFilterToTeam(teamFilter.getOrganization().getId(), teamFilter);
		}

		for (VulnerabilityFilter applicationFilter : applicationFilters) {
			vulnerabilityFilterDao.applyFilterToApplication(applicationFilter.getApplication().getId(), applicationFilter);
		}
	}

	private void updateAllScans() {
		updateScanCounts(scanDao.retrieveAll());
	}

	private void updateOrganizationVulnerabilities(Organization organization) {
		updateOrganizationVulnerabilities(organization, true);
	}
	private void updateOrganizationVulnerabilities(Organization organization, boolean updateScans) {
		List<Integer> applicationIdList = list();

		if (organization != null && organization.getApplications() != null) {
			for (Application application : organization.getApplications()) {
				if (application != null) {
					applicationIdList.add(application.getId());
					updateApplicationVulnerabilities(application, false);
				}
			}
		}

		if (updateScans) {
			updateScanCounts(scanDao.retrieveByApplicationIdList(applicationIdList));
		}
	}

	private void updateApplicationVulnerabilities(Application application) {
		updateApplicationVulnerabilities(application, true);
	}

	private void updateApplicationVulnerabilities(Application application, boolean updateScans) {

		if (application != null &&
				application.getOrganization() != null &&
				application.getOrganization().getId() != null) {

			updateAllVulnerabilities();

            vulnerabilityService.updateVulnerabilityReport(
					applicationService.loadApplication(application.getId())
			);

			updateScanCounts(application.getScans());
		}
	}

	// This method produces a map of generic vuln IDs to generic severities
	public Map<Integer, GenericSeverity> getMap(List<VulnerabilityFilter> filters) {
		Map<Integer, GenericSeverity> returnMap = new HashMap<>();

		// add global stuff first
		for (VulnerabilityFilter filter : filters) {
			if (filter.getGlobal()) {
				returnMap.put(
						filter.getSourceGenericVulnerability().getId(),
						filter.getTargetGenericSeverity());
			}
		}

		// then organization
		for (VulnerabilityFilter filter : filters) {
			if (filter.getOrganization() != null) {
				returnMap.put(
						filter.getSourceGenericVulnerability().getId(),
						filter.getTargetGenericSeverity());
			}
		}

		// then application
		for (VulnerabilityFilter filter : filters) {
			if (filter.getApplication() != null) {
				returnMap.put(
						filter.getSourceGenericVulnerability().getId(),
						filter.getTargetGenericSeverity());
			}
		}

		return returnMap;
	}

	@Override
	public List<VulnerabilityFilter> loadAllGlobal() {
		return vulnerabilityFilterDao.retrieveAllGlobal();
	}

	public List<VulnerabilityFilter> loadAllOrganization(int orgId) {
		return vulnerabilityFilterDao.retrieveAll(orgId);
	}

	public List<VulnerabilityFilter> loadAllApplication(int appId) {
		Application application = applicationDao.retrieveById(appId);
		if (application != null &&
				application.getOrganization() != null &&
				application.getOrganization().getId() != null) {
			return vulnerabilityFilterDao.retrieveAll(application.getOrganization().getId(), appId);
		} else {
			return list();
		}
	}

	@Override
	public VulnerabilityFilter getNewFilter(int orgId, int appId) {
		VulnerabilityFilter vulnerabilityFilter = new VulnerabilityFilter();
		if (appId != -1) {
			vulnerabilityFilter.setApplication(applicationDao.retrieveById(appId));
		} else if (orgId != -1) {
			vulnerabilityFilter.setOrganization(organizationDao.retrieveById(orgId));
		} else {
			vulnerabilityFilter.setGlobal(true);
		}
		return vulnerabilityFilter;
	}

	@Override
	public List<VulnerabilityFilter> getPrimaryVulnerabilityList(int orgId, int appId) {
		List<VulnerabilityFilter> filters;
		if (appId != -1) {
			filters = loadAllApplication(appId);
		} else if (orgId != -1) {
			filters = loadAllOrganization(orgId);
		} else {
			filters = loadAllGlobal();
		}
		return filters;
	}

	@Override
	public void updateScanCounts(List<Scan> scan) {
		statisticsCounterService.updateStatistics(scan);
	}
}
