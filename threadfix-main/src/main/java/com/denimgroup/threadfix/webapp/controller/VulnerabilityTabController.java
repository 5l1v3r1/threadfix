////////////////////////////////////////////////////////////////////////
//
//     Copyright (c) 2009-2014 Denim Group, Ltd.
//
//     The contents of this file are subject to the Mozilla Public License
//     Version 2.0 (the "License"); you may not use this file except in
//     compliance with the License. You may obtain a copy of the License at
//     http://www.mozilla.org/MPL/
//
//     Software distributed under the License is distributed on an "AS IS"
//     basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//     License for the specific language governing rights and limitations
//     under the License.
//
//     The Original Code is ThreadFix.
//
//     The Initial Developer of the Original Code is Denim Group, Ltd.
//     Portions created by Denim Group, Ltd. are Copyright (C)
//     Denim Group, Ltd. All Rights Reserved.
//
//     Contributor(s): Denim Group, Ltd.
//
////////////////////////////////////////////////////////////////////////

package com.denimgroup.threadfix.webapp.controller;

import com.denimgroup.threadfix.data.entities.Application;
import com.denimgroup.threadfix.data.entities.Permission;
import com.denimgroup.threadfix.data.entities.Vulnerability;
import com.denimgroup.threadfix.logging.SanitizedLogger;
import com.denimgroup.threadfix.remote.response.RestResponse;
import com.denimgroup.threadfix.service.ApplicationService;
import com.denimgroup.threadfix.service.VulnerabilityService;
import com.denimgroup.threadfix.service.beans.TableSortBean;
import com.denimgroup.threadfix.service.util.ControllerUtils;
import com.denimgroup.threadfix.service.util.PermissionUtils;
import com.denimgroup.threadfix.views.AllViews;
import com.denimgroup.threadfix.webapp.viewmodels.VulnerabilityCollectionModel;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.map.ObjectWriter;
import org.codehaus.jackson.map.SerializationConfig;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Controller
@RequestMapping("/organizations/{orgId}/applications/{appId}")
@SessionAttributes({"defectTracker", "application", "waf", "defectViewModel"})
public class VulnerabilityTabController {
	
	private final SanitizedLogger log = new SanitizedLogger(VulnerabilityTabController.class);

    @Autowired
	private ApplicationService applicationService;
    @Autowired
	private VulnerabilityService vulnerabilityService;

	////////////////////////////////////////////////////
	//                Table Methods
	////////////////////////////////////////////////////

	@RequestMapping(value="/table", method = RequestMethod.POST)
	public @ResponseBody String getOpenTableVulns(@PathVariable("orgId") Integer orgId,
			@PathVariable("appId") Integer appId,
			@ModelAttribute TableSortBean bean,
			Model model) throws IOException {
		
		bean.setOpen(true);
		bean.setFalsePositive(false);
		bean.setHidden(false);
		
		return getWriter().writeValueAsString(table(orgId, appId, bean, model));
	}

    private ObjectWriter getWriter() {
        ObjectMapper mapper = new ObjectMapper();
        mapper.configure(SerializationConfig.Feature.DEFAULT_VIEW_INCLUSION, false);

        return mapper.writerWithView(AllViews.TableRow.class);
    }
	
	public RestResponse<? extends Object> table(int orgId, int appId, TableSortBean bean, Model model) {
		if (!PermissionUtils.isAuthorized(Permission.READ_ACCESS, orgId, appId)) {
			return RestResponse.failure("You are not authorized to view this information.");
		}
		
		Application application = applicationService.loadApplication(appId);
		if (application == null || !application.isActive()) {
			log.warn(ResourceNotFoundException.getLogMessage("Application", appId));
			throw new ResourceNotFoundException();
		}
		
		long numVulns = applicationService.getCount(appId, bean);
		long numPages = numVulns / 100;
		if (numVulns % 100 == 0) {
			numPages -= 1;
		}
		if (bean.getPage() > numPages) {
			bean.setPage((int) (numPages + 1));
		}
		
		if (bean.getPage() < 1) {
			bean.setPage(1);
		}
		
		List<Vulnerability> vulnList = applicationService.getVulnTable(appId, bean);

        Map<String, Object> responseMap = new HashMap<>();
        responseMap.put("vulnerabilities", vulnList);
        responseMap.put("numVulns", numVulns);

        return RestResponse.success(responseMap);
	}
	
	// These are actions that change vulnerability state
	
	@RequestMapping(value="/table/close", method = RequestMethod.POST)
	public String closeTableVulnList(@PathVariable("orgId") Integer orgId,
			@PathVariable("appId") Integer appId,
			@ModelAttribute VulnerabilityCollectionModel vulnerabilityCollectionModel,
			Model model, HttpServletRequest request) {
			
		if (!checkCollectionModel(vulnerabilityCollectionModel, model)) {
			return "ajaxFailureHarness";
		}
		
		vulnerabilityService.closeAll(
			vulnerabilityCollectionModel.getVulnerabilityIds());
		
		String start = getMessageStart(vulnerabilityCollectionModel.getVulnerabilityIds());
		ControllerUtils.addSuccessMessage(request, start + "been closed successfully.");
		
		return redirectToApp(model, orgId, appId);
	}
	
	@RequestMapping(value="/table/open", method = RequestMethod.POST)
	public String openTableVulnList(@PathVariable("orgId") Integer orgId,
			@PathVariable("appId") Integer appId,
			@ModelAttribute VulnerabilityCollectionModel vulnerabilityCollectionModel,
			Model model, HttpServletRequest request) {
		
		if (!checkCollectionModel(vulnerabilityCollectionModel, model)) {
			return "ajaxFailureHarness";
		}
		
		vulnerabilityService.openAll(
				vulnerabilityCollectionModel.getVulnerabilityIds());
		
		String start = getMessageStart(vulnerabilityCollectionModel.getVulnerabilityIds());
		ControllerUtils.addSuccessMessage(request, start + "been opened successfully.");
        ControllerUtils.setActiveTab(request, ControllerUtils.CLOSED_VULN_TAB);
		
		return redirectToApp(model, orgId, appId);
	}
	
	@RequestMapping(value="/falsePositives/mark", method = RequestMethod.POST)
	public String setVulnsFalsePositive(@PathVariable("orgId") Integer orgId,
			@PathVariable("appId") Integer appId,
			@ModelAttribute VulnerabilityCollectionModel vulnerabilityCollectionModel,
			Model model, HttpServletRequest request) {
			
		if (!checkCollectionModel(vulnerabilityCollectionModel, model)) {
			return "ajaxFailureHarness";
		}
		
		vulnerabilityService.markListAsFalsePositive(vulnerabilityCollectionModel
				.getVulnerabilityIds());
		
		String start = getMessageStart(vulnerabilityCollectionModel.getVulnerabilityIds());
		ControllerUtils.addSuccessMessage(request, start + "been marked successfully as false positives.");

		return redirectToApp(model, orgId, appId);
	}

    @RequestMapping(value="/closed/falsePositives/mark", method = RequestMethod.POST)
    public String setClosedVulnsFalsePositive(@PathVariable("orgId") Integer orgId,
                                        @PathVariable("appId") Integer appId,
                                        @ModelAttribute VulnerabilityCollectionModel vulnerabilityCollectionModel,
                                        Model model, HttpServletRequest request) {

        if (!checkCollectionModel(vulnerabilityCollectionModel, model)) {
            return "ajaxFailureHarness";
        }

        vulnerabilityService.markListAsFalsePositive(vulnerabilityCollectionModel
                .getVulnerabilityIds());

        String start = getMessageStart(vulnerabilityCollectionModel.getVulnerabilityIds());
        ControllerUtils.addSuccessMessage(request, start + "been marked successfully as false positives.");
        ControllerUtils.setActiveTab(request, ControllerUtils.CLOSED_VULN_TAB);

        return redirectToApp(model, orgId, appId);
    }
	
	@RequestMapping(value="/falsePositives/unmark", method = RequestMethod.POST)
	public String setVulnsNotFalsePositive(@PathVariable("orgId") Integer orgId,
			@PathVariable("appId") Integer appId,
			@ModelAttribute VulnerabilityCollectionModel vulnerabilityCollectionModel,
			Model model, HttpServletRequest request) {
			
		if (!checkCollectionModel(vulnerabilityCollectionModel, model)) {
			return "ajaxFailureHarness";
		}
		
		vulnerabilityService.markListAsNotFalsePositive(vulnerabilityCollectionModel
				.getVulnerabilityIds());
		
		String start = getMessageStart(vulnerabilityCollectionModel.getVulnerabilityIds());
		ControllerUtils.addSuccessMessage(request, start + "been unmarked successfully.");
        ControllerUtils.setActiveTab(request, ControllerUtils.FALSE_POSITIVE_TAB);
		
		return redirectToApp(model, orgId, appId);
	}
	
	private String redirectToApp(Model model, int orgId, int appId) {
		model.addAttribute("contentPage", "/organizations/" + orgId + "/applications/" + appId);
		return "ajaxRedirectHarness";
	}
	
	private boolean checkCollectionModel(VulnerabilityCollectionModel vulnerabilityCollectionModel,
			Model model) {
		if (vulnerabilityCollectionModel == null
				|| vulnerabilityCollectionModel.getVulnerabilityIds() == null
				|| vulnerabilityCollectionModel.getVulnerabilityIds().size() == 0) {
			String error = "You must select at least one vulnerability.";
			model.addAttribute("errorMessage", error);
			model.addAttribute("contentPage", "errorMessage.jsp");
			return false;
		} else {
			return true;
		}
	}
	
	private String getMessageStart(List<Integer> ids) {
		if (ids == null || ids.size() == 0) {
			return "";
		} else if (ids.size() == 1) {
			return "1 Vulnerability has ";
		} else {
			return ids.size() + " Vulnerabilities have ";
		}
	}
	
}
