////////////////////////////////////////////////////////////////////////
//
//     Copyright (c) 2009-2015 Denim Group, Ltd.
//
//     The contents of this file are subject to the Mozilla Public License
//     Version 2.0 (the "License"); you may not use this file except in
//     compliance with the License. You may obtain a copy of the License at
//     http://www.mozilla.org/MPL/
//
//     Software distributed under the License is distributed on an "AS IS"
//     basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//     License for the specific language governing rights and limitations
//     under the License.
//
//     The Original Code is ThreadFix.
//
//     The Initial Developer of the Original Code is Denim Group, Ltd.
//     Portions created by Denim Group, Ltd. are Copyright (C)
//     Denim Group, Ltd. All Rights Reserved.
//
//     Contributor(s): Denim Group, Ltd.
//
////////////////////////////////////////////////////////////////////////
package com.denimgroup.threadfix.service.eventmodel.aspect;

import com.denimgroup.threadfix.data.entities.*;
import com.denimgroup.threadfix.data.enums.EventAction;
import com.denimgroup.threadfix.logging.SanitizedLogger;
import com.denimgroup.threadfix.service.EventBuilder;
import com.denimgroup.threadfix.service.VulnerabilityCommentService;
import com.denimgroup.threadfix.service.VulnerabilityService;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.List;

@Aspect
@Component
public class VulnerabilityEventTrackingAspect extends EventTrackingAspect {

    protected SanitizedLogger log = new SanitizedLogger(VulnerabilityEventTrackingAspect.class);

    @Autowired
    private VulnerabilityService vulnerabilityService;

    @Around("execution(* com.denimgroup.threadfix.service.VulnerabilityService.storeVulnerability(..)) && args(vulnerability, eventAction)")
    public Object emitStoreVulnerabilityEvent(ProceedingJoinPoint joinPoint, Vulnerability vulnerability, EventAction eventAction) throws Throwable {
        Object proceed = joinPoint.proceed();
        try {
            if (eventAction != EventAction.VULNERABILITY_OTHER) {
                Event event = generateStoreVulnerabilityEvent(vulnerability, eventAction);
                publishEventTrackingEvent(event);
            }
        } catch (Exception e) {
            log.error("Error while logging Event: " + eventAction, e);
        } finally {
            return proceed;
        }
    }

    @Around("execution(* com.denimgroup.threadfix.data.dao.VulnerabilityDao.markAllClosed(..)) && args(vulns)")
    public Object emitMarkAllClosedVulnerabilityEvent(ProceedingJoinPoint joinPoint, List<Vulnerability> vulns) throws Throwable {
        Object proceed = joinPoint.proceed();
        try {
            for (Vulnerability vuln: vulns) {
                Event event = generateStoreVulnerabilityEvent(vuln, EventAction.VULNERABILITY_CLOSE);
                publishEventTrackingEvent(event);
            }
        } catch (Exception e) {
            log.error("Error while logging Event: " + EventAction.VULNERABILITY_CLOSE, e);
        } finally {
            return proceed;
        }
    }

    @Around("execution(* com.denimgroup.threadfix.data.dao.VulnerabilityDao.markAllOpen(..)) && args(vulns)")
    public Object emitMarkAllOpenVulnerabilityEvent(ProceedingJoinPoint joinPoint, List<Vulnerability> vulns) throws Throwable {
        Object proceed = joinPoint.proceed();
        try {
            for (Vulnerability vuln: vulns) {
                Event event = generateStoreVulnerabilityEvent(vuln, EventAction.VULNERABILITY_CLOSE);
                publishEventTrackingEvent(event);
            }
        } catch (Exception e) {
            log.error("Error while logging Event: " + EventAction.VULNERABILITY_CLOSE, e);
        } finally {
            return proceed;
        }
    }

    protected Event generateStoreVulnerabilityEvent(Vulnerability vulnerability, EventAction eventAction) {
        Event event = new EventBuilder()
                .setUser(userService.getCurrentUser())
                .setEventAction(eventAction)
                .setVulnerability(vulnerability)
                .setApplication(vulnerability.getApplication())
                .generateEvent();
        eventService.saveEvent(event);
        return event;
    }

    @Around("execution(* com.denimgroup.threadfix.service.VulnerabilityCommentService.addCommentToVuln(..)) && args(comment, vulnerabilityId)")
    public Object emitVulnerabilityCommentEvent(ProceedingJoinPoint joinPoint, VulnerabilityComment comment, Integer vulnerabilityId) throws Throwable {
        Object proceed = joinPoint.proceed();
        try {
            if (proceed.equals(VulnerabilityCommentService.VALID)) {
                Event event = generateVulnerabilityCommentEvent(comment, vulnerabilityId);
                publishEventTrackingEvent(event);
            }
        } catch (Exception e) {
            log.error("Error while logging Event: " + EventAction.VULNERABILITY_COMMENT, e);
        } finally {
            return proceed;
        }
    }

    protected Event generateVulnerabilityCommentEvent(VulnerabilityComment comment, Integer vulnerabilityId) {
        Vulnerability vulnerability = vulnerabilityService.loadVulnerability(vulnerabilityId);
        Event event = new EventBuilder()
                .setUser(userService.getCurrentUser())
                .setEventAction(EventAction.VULNERABILITY_COMMENT)
                .setVulnerabilityComment(comment)
                .setVulnerability(vulnerability)
                .setApplication(vulnerability.getApplication())
                .generateEvent();
        eventService.saveEvent(event);
        return event;
    }
}
