////////////////////////////////////////////////////////////////////////
//
//     Copyright (c) 2009-2014 Denim Group, Ltd.
//
//     The contents of this file are subject to the Mozilla Public License
//     Version 2.0 (the "License"); you may not use this file except in
//     compliance with the License. You may obtain a copy of the License at
//     http://www.mozilla.org/MPL/
//
//     Software distributed under the License is distributed on an "AS IS"
//     basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//     License for the specific language governing rights and limitations
//     under the License.
//
//     The Original Code is ThreadFix.
//
//     The Initial Developer of the Original Code is Denim Group, Ltd.
//     Portions created by Denim Group, Ltd. are Copyright (C)
//     Denim Group, Ltd. All Rights Reserved.
//
//     Contributor(s): Denim Group, Ltd.
//
////////////////////////////////////////////////////////////////////////
package com.denimgroup.threadfix.cli;

import com.denimgroup.threadfix.VulnerabilityInfo;
import com.denimgroup.threadfix.remote.ThreadFixRestClient;
import com.denimgroup.threadfix.remote.ThreadFixRestClientImpl;
import com.denimgroup.threadfix.remote.response.RestResponse;
import org.junit.Test;

import java.util.Arrays;

import static org.junit.Assert.assertTrue;

/**
 * Created by mac on 5/21/14.
 *
 * These are integration tests which require a variety of data to be present in the ThreadFix instance.
 *
 */
public class VulnerabilitySearchTests {

    private ThreadFixRestClient getThreadFixRestClient() {
        // TODO use parameters like an adult
        return new ThreadFixRestClientImpl("http://localhost:8080/threadfix/rest", "TIERsFozlnULfue5zvooPkhh3NXm1kVUwO6i6jKUfhq0");
    }

    @Test
    public void testGenericVulnerabilityIds() {
        ThreadFixRestClient client = getThreadFixRestClient();

        RestResponse<VulnerabilityInfo[]> response = client.searchVulnerabilities(Arrays.asList(79, 89),null,null,null,null,null,null,null,null,null,null,null,null,null,null);

        assertTrue("Response wasn't successful.", response.success);
        assertTrue("Response object was null.", response.object != null);
        for (VulnerabilityInfo vulnerability : response.object) {
            assertTrue("Generic Vulnerability ID wasn't 79 or 89.",
                    vulnerability.getGenericVulnerability().getId() == 79 || vulnerability.getGenericVulnerability().getId() == 89);
        }
    }

    @Test
    public void testTeamIds() {
        ThreadFixRestClient client = getThreadFixRestClient();

        RestResponse<VulnerabilityInfo[]> response = client.searchVulnerabilities(null,Arrays.asList(1,2,3,4,5),null,null,null,null,null,null,null,null,null,null,null,null,null);

        assertTrue("Response wasn't successful.", response.success);
        assertTrue("Response object was null.", response.object != null);
        for (VulnerabilityInfo vulnerability : response.object) {
            assertTrue("Team ID was invalid.", vulnerability.getTeam().getId() < 6);
        }
    }

    @Test
    public void testApplicationIds() {
        ThreadFixRestClient client = getThreadFixRestClient();

        RestResponse<VulnerabilityInfo[]> response = client.searchVulnerabilities(null,null,Arrays.asList(1,2,3,4,5),null,null,null,null,null,null,null,null,null,null,null,null);

        assertTrue("Response wasn't successful.", response.success);
        assertTrue("Response object was null.", response.object != null);
        for (VulnerabilityInfo vulnerability : response.object) {
            assertTrue("Application ID was invalid.", vulnerability.getApp().getId() < 6);
        }
    }

    @Test
    public void testScanners() {
        ThreadFixRestClient client = getThreadFixRestClient();

        RestResponse<VulnerabilityInfo[]> response = client.searchVulnerabilities(null,null,null,Arrays.asList("Arachni"),null,null,null,null,null,null,null,null,null,null,null);

        assertTrue("Response wasn't successful.", response.success);
        assertTrue("Response object was null.", response.object != null);
        for (VulnerabilityInfo vulnerability : response.object) {
            assertTrue("Scanner data was invalid.", vulnerability.getChannelNames().contains("Arachni"));
        }
    }

    @Test
    public void testGenericSeverityValues() {
        ThreadFixRestClient client = getThreadFixRestClient();

        for (int i = 1; i < 6; i++) {
            RestResponse<VulnerabilityInfo[]> response = client.searchVulnerabilities(null,null,null,null,Arrays.asList(i),null,null,null,null,null,null,null,null,null,null);

            assertTrue("Response wasn't successful.", response.success);
            assertTrue("Response object was null.", response.object != null);
            for (VulnerabilityInfo vulnerability : response.object) {
                assertTrue("Generic Severity intValue wasn't " + i + ".",
                        vulnerability.getGenericSeverity().getIntValue() == i);
            }
        }
    }


}
