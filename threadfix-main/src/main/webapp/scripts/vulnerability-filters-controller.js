var threadfixModule = angular.module('threadfix');

threadfixModule.controller("VulnerabilityFiltersController", function($modal, $scope, $http) {

    $scope.$watch('csrfToken', function(){
        $http.get('filters/map' + $scope.csrfToken).
            success(function(data, status, headers, config) {

                if (data.success) {

                    $scope.vulnerabilityFilter = data.object.vulnerabilityFilter;
                    $scope.severityFilter = data.object.severityFilter;
                    $scope.vulnerabilityFilterList = data.object.vulnerabilityFilterList;
                    $scope.currentVulnFilters = $scope.vulnerabilityFilterList;
                    $scope.type = data.object.type;
                    $scope.genericSeverities = data.object.genericSeverities;
                    $scope.genericVulnerabilities = data.object.genericVulnerabilities;

                    $scope.setTab(data.object.type);
                } else {
                    $scope.errorMessage = "Failure. Message was : " + data.message;
                }

                $scope.initialized = true;
            }).
            error(function(data, status, headers, config) {
                $scope.initialized = true;
                $scope.errorMessage = "Failed to retrieve map. HTTP status was " + status;
            });
    });

    $scope.setTab = function(tab) {
        $scope.tab = tab;

        if (tab === 'Global') {
            $scope.vulnFiltersTitle = 'Global Vulnerability Filters';
            $scope.severityFiltersTitle = 'Global Severity Filters';
        } else if (tab === 'Application') {
            $scope.vulnFiltersTitle = 'Application Vulnerability Filters';
            $scope.severityFiltersTitle = 'Application Severity Filters';
        } else {
            $scope.severityFiltersTitle = 'Team Severity Filters';
            $scope.vulnFiltersTitle = 'Team Vulnerability Filters';
        }
    }

    $scope.showNewFilterModal = function() {
        var modalInstance = $modal.open({
            windowClass: 'filter-modal',
            templateUrl: 'newVulnerabilityFilterForm.html',
            controller: 'ModalControllerWithConfig',
            resolve: {
                url: function() {
                    return "filters/new" + $scope.csrfToken;
                },
                object: function () {
                    return {
                        targetGenericSeverity: {
                            id: 5
                        }
                    }
                },
                config: function() {
                    return {
                        genericVulnerabilities: $scope.genericVulnerabilities,
                        genericSeverities: $scope.genericSeverities
                    }
                },
                buttonText: function() {
                    return "Create Filter";
                }
            }
        });

        modalInstance.result.then(function (newApplication) {

            $scope.applications.push(newApplication);

            $scope.applications.sort(nameCompare);

            $scope.successMessage = "Successfully added application " + newApplication.name;

        }, function () {
            $log.info('Modal dismissed at: ' + new Date());
        });
    }

    $scope.editFilter = function(filter) {
        var modalInstance = $modal.open({
            windowClass: 'filter-modal',
            templateUrl: 'newVulnerabilityFilterForm.html',
            controller: 'ModalControllerWithConfig',
            resolve: {
                url: function() {
                    return "filters/new" + $scope.csrfToken;
                },
                object: function () {
                    return filter
                },
                config: function() {
                    return {
                        genericVulnerabilities: $scope.genericVulnerabilities,
                        genericSeverities: $scope.genericSeverities
                    }
                },
                buttonText: function() {
                    return "Create Filter";
                }
            }
        });

        modalInstance.result.then(function (newApplication) {

            $scope.applications.push(newApplication);

            $scope.applications.sort(nameCompare);

            $scope.successMessage = "Successfully added application " + newApplication.name;

        }, function () {
            $log.info('Modal dismissed at: ' + new Date());
        });
    }

});